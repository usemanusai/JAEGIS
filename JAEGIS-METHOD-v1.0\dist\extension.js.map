{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://bmad-vscode-extension/./src/integration/Context7Integration.ts","webpack://bmad-vscode-extension/./src/orchestrator/BMadOrchestrator.ts","webpack://bmad-vscode-extension/./src/types/BMadTypes.ts","webpack://bmad-vscode-extension/./src/orchestrator/BMadInitializer.ts","webpack://bmad-vscode-extension/./src/extension.ts","webpack://bmad-vscode-extension/./src/monitoring/WorkspaceMonitor.ts","webpack://bmad-vscode-extension/./src/agents/DakotaAgent.ts","webpack://bmad-vscode-extension/./src/analysis/WorkspaceAnalyzer.ts","webpack://bmad-vscode-extension/external commonjs \"vscode\"","webpack://bmad-vscode-extension/./src/ui/StatusBarManager.ts","webpack://bmad-vscode-extension/./src/commands/CommandManager.ts","webpack://bmad-vscode-extension/./src/integration/AugmentIntegration.ts","webpack://bmad-vscode-extension/./src/config/ConfigurationManager.ts","webpack://bmad-vscode-extension/./src/integration/AugmentAPI.ts","webpack://bmad-vscode-extension/./src/monitoring/DependencyMonitor.ts","webpack://bmad-vscode-extension/external node-commonjs \"fs\"","webpack://bmad-vscode-extension/external node-commonjs \"path\"","webpack://bmad-vscode-extension/./src/integration/AugmentMenuIntegration.ts","webpack://bmad-vscode-extension/webpack/bootstrap","webpack://bmad-vscode-extension/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\n/**\n * Context7 Integration Module for Dakota Agent\n * Provides seamless integration with Upstash Context7 system for dependency research\n * Automatically activates for dependency-related tasks without manual user prompts\n */\n\nexport interface Context7Config {\n    apiKey?: string;\n    baseUrl: string;\n    autoActivate: boolean;\n    maxRetries: number;\n    timeoutMs: number;\n    cacheEnabled: boolean;\n    cacheTtlMs: number;\n}\n\nexport interface Context7Query {\n    query: string;\n    sources?: string[];\n    dateContext?: string;\n    focus?: string[];\n    packageName?: string;\n    version?: string;\n    ecosystem?: string;\n}\n\nexport interface Context7Response {\n    success: boolean;\n    data?: any;\n    insights?: string[];\n    recommendations?: string[];\n    sources?: string[];\n    confidence?: number;\n    error?: string;\n    cached?: boolean;\n}\n\nexport interface Context7ResearchResult {\n    query: Context7Query;\n    response: Context7Response;\n    timestamp: Date;\n    duration: number;\n    quality: number;\n}\n\n/**\n * Context7 Integration Service\n * Handles automatic research activation and intelligent caching\n */\nexport class Context7Integration {\n    private config: Context7Config;\n    private cache: Map<string, { result: Context7Response; timestamp: Date }>;\n    private isAvailable: boolean = false;\n    private lastHealthCheck: Date | null = null;\n    private healthCheckInterval: number = 300000; // 5 minutes\n\n    constructor(config?: Partial<Context7Config>) {\n        this.config = {\n            baseUrl: 'https://api.context7.dev',\n            autoActivate: true,\n            maxRetries: 3,\n            timeoutMs: 30000,\n            cacheEnabled: true,\n            cacheTtlMs: 3600000, // 1 hour\n            ...config\n        };\n        \n        this.cache = new Map();\n        this.initializeIntegration();\n    }\n\n    /**\n     * Initialize Context7 integration and check availability\n     */\n    private async initializeIntegration(): Promise<void> {\n        try {\n            // Check if Context7 is available\n            await this.healthCheck();\n            \n            // Load configuration from VS Code settings\n            await this.loadConfiguration();\n            \n            console.log('Context7 integration initialized successfully');\n        } catch (error) {\n            console.warn('Context7 integration initialization failed:', error);\n            this.isAvailable = false;\n        }\n    }\n\n    /**\n     * Load configuration from VS Code settings\n     */\n    private async loadConfiguration(): Promise<void> {\n        const config = vscode.workspace.getConfiguration('bmad.context7');\n        \n        this.config.apiKey = config.get('apiKey') || process.env.CONTEXT7_API_KEY;\n        this.config.baseUrl = config.get('baseUrl') || this.config.baseUrl;\n        this.config.autoActivate = config.get('autoActivate', true);\n        this.config.maxRetries = config.get('maxRetries', 3);\n        this.config.timeoutMs = config.get('timeoutMs', 30000);\n        this.config.cacheEnabled = config.get('cacheEnabled', true);\n        this.config.cacheTtlMs = config.get('cacheTtlMs', 3600000);\n    }\n\n    /**\n     * Check Context7 service health and availability\n     */\n    private async healthCheck(): Promise<boolean> {\n        try {\n            const now = new Date();\n            \n            // Skip if recently checked\n            if (this.lastHealthCheck && \n                (now.getTime() - this.lastHealthCheck.getTime()) < this.healthCheckInterval) {\n                return this.isAvailable;\n            }\n\n            // Simple health check - attempt to reach the service\n            const response = await this.makeRequest('/health', 'GET', null, 5000);\n            this.isAvailable = response.success;\n            this.lastHealthCheck = now;\n            \n            return this.isAvailable;\n        } catch (error) {\n            this.isAvailable = false;\n            this.lastHealthCheck = new Date();\n            return false;\n        }\n    }\n\n    /**\n     * Automatic research activation for dependency tasks\n     */\n    async autoResearch(query: Context7Query): Promise<Context7ResearchResult | null> {\n        if (!this.config.autoActivate || !await this.healthCheck()) {\n            return null;\n        }\n\n        const startTime = Date.now();\n        \n        try {\n            // Check cache first\n            const cacheKey = this.generateCacheKey(query);\n            const cached = this.getCachedResult(cacheKey);\n            \n            if (cached) {\n                return {\n                    query,\n                    response: { ...cached, cached: true },\n                    timestamp: new Date(),\n                    duration: Date.now() - startTime,\n                    quality: this.assessResponseQuality(cached)\n                };\n            }\n\n            // Perform research\n            const response = await this.performResearch(query);\n            \n            // Cache successful results\n            if (response.success && this.config.cacheEnabled) {\n                this.setCachedResult(cacheKey, response);\n            }\n\n            return {\n                query,\n                response,\n                timestamp: new Date(),\n                duration: Date.now() - startTime,\n                quality: this.assessResponseQuality(response)\n            };\n\n        } catch (error) {\n            console.error('Context7 auto-research failed:', error);\n            return {\n                query,\n                response: {\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                },\n                timestamp: new Date(),\n                duration: Date.now() - startTime,\n                quality: 0\n            };\n        }\n    }\n\n    /**\n     * Perform dependency security research\n     */\n    async securityResearch(packageName: string, version?: string, ecosystem?: string): Promise<Context7ResearchResult | null> {\n        const query: Context7Query = {\n            query: `security vulnerabilities ${packageName} ${version || 'latest'} ${new Date().toISOString().split('T')[0]}`,\n            sources: ['nvd', 'github_advisories', 'snyk', 'osv'],\n            focus: ['security_vulnerabilities', 'cve_details', 'patch_availability', 'exploit_status'],\n            packageName,\n            version,\n            ecosystem,\n            dateContext: new Date().toISOString().split('T')[0]\n        };\n\n        return await this.autoResearch(query);\n    }\n\n    /**\n     * Perform dependency update research\n     */\n    async updateResearch(packageName: string, currentVersion: string, targetVersion: string, ecosystem?: string): Promise<Context7ResearchResult | null> {\n        const query: Context7Query = {\n            query: `breaking changes migration guide ${packageName} ${currentVersion} to ${targetVersion}`,\n            sources: ['official_docs', 'github_releases', 'community_discussions', 'migration_guides'],\n            focus: ['breaking_changes', 'migration_steps', 'compatibility_issues', 'rollback_procedures'],\n            packageName,\n            version: `${currentVersion} -> ${targetVersion}`,\n            ecosystem,\n            dateContext: new Date().toISOString().split('T')[0]\n        };\n\n        return await this.autoResearch(query);\n    }\n\n    /**\n     * Perform alternative package research\n     */\n    async alternativeResearch(packageName: string, reason: string, ecosystem?: string): Promise<Context7ResearchResult | null> {\n        const query: Context7Query = {\n            query: `modern alternatives to ${packageName} ${reason} ${new Date().getFullYear()}`,\n            sources: ['community_recommendations', 'benchmark_comparisons', 'adoption_trends', 'expert_opinions'],\n            focus: ['alternative_packages', 'migration_complexity', 'performance_comparison', 'community_support'],\n            packageName,\n            ecosystem,\n            dateContext: new Date().toISOString().split('T')[0]\n        };\n\n        return await this.autoResearch(query);\n    }\n\n    /**\n     * Perform actual research request to Context7\n     */\n    private async performResearch(query: Context7Query): Promise<Context7Response> {\n        const payload = {\n            query: query.query,\n            sources: query.sources || [],\n            context: {\n                date: query.dateContext || new Date().toISOString().split('T')[0],\n                focus: query.focus || [],\n                package: query.packageName,\n                version: query.version,\n                ecosystem: query.ecosystem\n            }\n        };\n\n        const response = await this.makeRequest('/research', 'POST', payload);\n        return response;\n    }\n\n    /**\n     * Make HTTP request to Context7 API\n     */\n    private async makeRequest(endpoint: string, method: string, data?: any, timeoutMs?: number): Promise<Context7Response> {\n        const url = `${this.config.baseUrl}${endpoint}`;\n        const timeout = timeoutMs || this.config.timeoutMs;\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n        try {\n            const headers: Record<string, string> = {\n                'Content-Type': 'application/json',\n                'User-Agent': 'BMAD-Dakota-Agent/1.0'\n            };\n\n            if (this.config.apiKey) {\n                headers['Authorization'] = `Bearer ${this.config.apiKey}`;\n            }\n\n            const response = await fetch(url, {\n                method,\n                headers,\n                body: data ? JSON.stringify(data) : undefined,\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const result: any = await response.json();\n            return {\n                success: true,\n                data: result.data,\n                insights: result.insights || [],\n                recommendations: result.recommendations || [],\n                sources: result.sources || [],\n                confidence: result.confidence || 0.5\n            };\n\n        } catch (error) {\n            clearTimeout(timeoutId);\n            \n            if (error instanceof Error && error.name === 'AbortError') {\n                throw new Error('Request timeout');\n            }\n            \n            throw error;\n        }\n    }\n\n    /**\n     * Generate cache key for query\n     */\n    private generateCacheKey(query: Context7Query): string {\n        const key = `${query.query}|${query.sources?.join(',')}|${query.focus?.join(',')}|${query.packageName}|${query.version}`;\n        return Buffer.from(key).toString('base64');\n    }\n\n    /**\n     * Get cached result if available and not expired\n     */\n    private getCachedResult(cacheKey: string): Context7Response | null {\n        if (!this.config.cacheEnabled) {\n            return null;\n        }\n\n        const cached = this.cache.get(cacheKey);\n        if (!cached) {\n            return null;\n        }\n\n        const now = new Date();\n        const age = now.getTime() - cached.timestamp.getTime();\n        \n        if (age > this.config.cacheTtlMs) {\n            this.cache.delete(cacheKey);\n            return null;\n        }\n\n        return cached.result;\n    }\n\n    /**\n     * Cache research result\n     */\n    private setCachedResult(cacheKey: string, result: Context7Response): void {\n        if (!this.config.cacheEnabled) {\n            return;\n        }\n\n        this.cache.set(cacheKey, {\n            result,\n            timestamp: new Date()\n        });\n\n        // Clean up old cache entries periodically\n        if (this.cache.size > 1000) {\n            this.cleanupCache();\n        }\n    }\n\n    /**\n     * Clean up expired cache entries\n     */\n    private cleanupCache(): void {\n        const now = new Date();\n        const expiredKeys: string[] = [];\n\n        for (const [key, value] of this.cache.entries()) {\n            const age = now.getTime() - value.timestamp.getTime();\n            if (age > this.config.cacheTtlMs) {\n                expiredKeys.push(key);\n            }\n        }\n\n        expiredKeys.forEach(key => this.cache.delete(key));\n    }\n\n    /**\n     * Assess the quality of a Context7 response\n     */\n    private assessResponseQuality(response: Context7Response): number {\n        if (!response.success) {\n            return 0;\n        }\n\n        let quality = 0.5; // Base quality\n\n        // Confidence score from Context7\n        if (response.confidence) {\n            quality = Math.max(quality, response.confidence);\n        }\n\n        // Number of sources\n        if (response.sources && response.sources.length > 0) {\n            quality += Math.min(0.2, response.sources.length * 0.05);\n        }\n\n        // Quality of insights\n        if (response.insights && response.insights.length > 0) {\n            quality += Math.min(0.2, response.insights.length * 0.04);\n        }\n\n        // Quality of recommendations\n        if (response.recommendations && response.recommendations.length > 0) {\n            quality += Math.min(0.1, response.recommendations.length * 0.02);\n        }\n\n        return Math.min(1.0, quality);\n    }\n\n    /**\n     * Check if Context7 integration is available\n     */\n    isIntegrationAvailable(): boolean {\n        return this.isAvailable;\n    }\n\n    /**\n     * Get integration status and statistics\n     */\n    getIntegrationStatus(): {\n        available: boolean;\n        cacheSize: number;\n        lastHealthCheck: Date | null;\n        config: Context7Config;\n    } {\n        return {\n            available: this.isAvailable,\n            cacheSize: this.cache.size,\n            lastHealthCheck: this.lastHealthCheck,\n            config: { ...this.config, apiKey: this.config.apiKey ? '***' : undefined }\n        };\n    }\n\n    /**\n     * Clear cache and reset integration\n     */\n    reset(): void {\n        this.cache.clear();\n        this.lastHealthCheck = null;\n        this.isAvailable = false;\n    }\n\n    /**\n     * Dispose of integration resources\n     */\n    dispose(): void {\n        this.cache.clear();\n    }\n}\n","import * as vscode from 'vscode';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { StatusBarManager } from '../ui/StatusBarManager';\nimport { BMadInitializer } from './BMadInitializer';\nimport { \n    BMadMode, \n    AgentId, \n    ProjectAnalysis, \n    ModeExecutionContext,\n    WorkflowProgress,\n    BMadError\n} from '../types/BMadTypes';\n\nexport class BMadOrchestrator {\n    private context: vscode.ExtensionContext;\n    private analyzer: WorkspaceAnalyzer;\n    private statusBar: StatusBarManager;\n    private initializer: BMadInitializer;\n    private activeAgents: AgentId[] = [];\n    private currentMode?: BMadMode;\n    private workflowProgress?: WorkflowProgress;\n\n    constructor(\n        context: vscode.ExtensionContext,\n        analyzer: WorkspaceAnalyzer,\n        statusBar: StatusBarManager,\n        initializer: BMadInitializer\n    ) {\n        this.context = context;\n        this.analyzer = analyzer;\n        this.statusBar = statusBar;\n        this.initializer = initializer;\n    }\n\n    /**\n     * Initialize workspace with BMAD structure\n     */\n    async initializeWorkspace(workspaceFolder: vscode.WorkspaceFolder): Promise<void> {\n        try {\n            await this.initializer.initializeWorkspace(workspaceFolder);\n            \n            // Emit initialization event\n            await vscode.commands.executeCommand('bmad.internal.workspaceInitialized', {\n                workspaceFolder: workspaceFolder.name,\n                timestamp: new Date().toISOString()\n            });\n\n        } catch (error) {\n            throw new BMadError(\n                `Failed to initialize workspace: ${error}`,\n                'INIT_FAILED',\n                'initialization'\n            );\n        }\n    }\n\n    /**\n     * Execute a specific BMAD mode\n     */\n    async executeMode(mode: BMadMode, projectAnalysis: ProjectAnalysis): Promise<void> {\n        try {\n            this.currentMode = mode;\n            \n            // Create execution context\n            const context = await this.createExecutionContext(mode, projectAnalysis);\n            \n            // Initialize workflow progress\n            this.initializeWorkflowProgress(mode);\n            \n            // Activate recommended agents\n            await this.activateAgents(projectAnalysis.recommendedAgents);\n            \n            // Execute mode-specific workflow\n            await this.executeWorkflow(context);\n            \n        } catch (error) {\n            console.error(`Failed to execute ${mode} mode:`, error);\n            this.statusBar.showError(`Failed to execute ${mode} mode: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Activate specific AI agents\n     */\n    async activateAgents(agentIds: AgentId[]): Promise<void> {\n        try {\n            this.activeAgents = [...agentIds];\n            \n            // Update status bar with active agents\n            if (this.currentMode) {\n                this.statusBar.updateMode(this.currentMode, this.activeAgents);\n            }\n            \n            // Emit agent activation event\n            await vscode.commands.executeCommand('bmad.internal.agentsActivated', {\n                agents: agentIds,\n                timestamp: new Date().toISOString()\n            });\n\n            console.log(`Activated agents: ${agentIds.join(', ')}`);\n\n        } catch (error) {\n            throw new BMadError(\n                `Failed to activate agents: ${error}`,\n                'AGENT_ACTIVATION_FAILED',\n                'execution'\n            );\n        }\n    }\n\n    /**\n     * Get currently active agents\n     */\n    getActiveAgents(): AgentId[] {\n        return [...this.activeAgents];\n    }\n\n    /**\n     * Get current mode\n     */\n    getCurrentMode(): BMadMode | undefined {\n        return this.currentMode;\n    }\n\n    /**\n     * Update workflow progress\n     */\n    updateProgress(progress: Partial<WorkflowProgress>): void {\n        if (this.workflowProgress) {\n            this.workflowProgress = { ...this.workflowProgress, ...progress };\n            this.statusBar.updateProgress(this.workflowProgress);\n            \n            // Emit progress update event\n            vscode.commands.executeCommand('bmad.internal.progressUpdated', this.workflowProgress);\n        }\n    }\n\n    /**\n     * Create execution context for mode\n     */\n    private async createExecutionContext(mode: BMadMode, projectAnalysis: ProjectAnalysis): Promise<ModeExecutionContext> {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            throw new BMadError('No workspace folder available', 'NO_WORKSPACE', 'execution');\n        }\n\n        // Get user preferences\n        const config = vscode.workspace.getConfiguration('bmad');\n        const userPreferences = {\n            autoActivateRecommendedAgents: config.get('autoActivateRecommendedAgents', true),\n            enableRealTimeMonitoring: config.get('enableRealTimeMonitoring', true),\n            progressNotifications: config.get('progressNotifications', true)\n        };\n\n        // Check for existing artifacts\n        const existingArtifacts = await this.getExistingArtifacts(workspaceFolder);\n\n        return {\n            mode,\n            workspaceFolder,\n            projectAnalysis,\n            selectedAgents: projectAnalysis.recommendedAgents,\n            userPreferences,\n            existingArtifacts\n        };\n    }\n\n    /**\n     * Initialize workflow progress tracking\n     */\n    private initializeWorkflowProgress(mode: BMadMode): void {\n        this.workflowProgress = {\n            mode,\n            phase: 'Initializing',\n            progress: 0,\n            completedTasks: [],\n            remainingTasks: this.getModeTaskList(mode)\n        };\n        \n        this.statusBar.updateProgress(this.workflowProgress);\n    }\n\n    /**\n     * Execute workflow based on mode\n     */\n    private async executeWorkflow(context: ModeExecutionContext): Promise<void> {\n        switch (context.mode) {\n            case 'documentation':\n                await this.executeDocumentationMode(context);\n                break;\n            case 'fullDevelopment':\n                await this.executeFullDevelopmentMode(context);\n                break;\n            case 'continueProject':\n                await this.executeContinueProjectMode(context);\n                break;\n            case 'taskOverview':\n                await this.executeTaskOverviewMode(context);\n                break;\n            case 'debugMode':\n                await this.executeDebugMode(context);\n                break;\n            case 'continuousExecution':\n                await this.executeContinuousExecutionMode(context);\n                break;\n            case 'featureGapAnalysis':\n                await this.executeFeatureGapAnalysisMode(context);\n                break;\n            case 'githubIntegration':\n                await this.executeGithubIntegrationMode(context);\n                break;\n            default:\n                throw new BMadError(`Unknown mode: ${context.mode}`, 'UNKNOWN_MODE', 'execution');\n        }\n    }\n\n    /**\n     * Execute Documentation Mode workflow\n     */\n    private async executeDocumentationMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Project Analysis', progress: 10 });\n        \n        // Simulate workflow execution\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'PRD Development', progress: 30 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Architecture Design', progress: 60 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Checklist Creation', progress: 90 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Documentation Complete', progress: 100 });\n        \n        // Show completion message\n        const action = await vscode.window.showInformationMessage(\n            'Documentation Mode completed successfully! Generated: prd.md, architecture.md, checklist.md',\n            'Open Documents',\n            'Start Development',\n            'OK'\n        );\n\n        if (action === 'Open Documents') {\n            await this.openGeneratedDocuments(context.workspaceFolder);\n        } else if (action === 'Start Development') {\n            await this.executeMode('fullDevelopment', context.projectAnalysis);\n        }\n    }\n\n    /**\n     * Execute Full Development Mode workflow\n     */\n    private async executeFullDevelopmentMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Development Planning', progress: 10 });\n        \n        // Show agent selection for development\n        const action = await vscode.window.showInformationMessage(\n            'Full Development Mode: Ready to begin development workflow',\n            'Continue with Recommended Agents',\n            'Select Different Agents',\n            'Cancel'\n        );\n\n        if (action === 'Continue with Recommended Agents') {\n            this.updateProgress({ phase: 'Development in Progress', progress: 50 });\n            // Continue with development workflow\n        } else if (action === 'Select Different Agents') {\n            await vscode.commands.executeCommand('bmad.selectAgents');\n        }\n    }\n\n    /**\n     * Execute Continue Project Mode workflow\n     */\n    private async executeContinueProjectMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Analyzing Existing Project', progress: 20 });\n        \n        // Analyze existing project state\n        const existingState = await this.analyzeExistingProjectState(context.workspaceFolder);\n        \n        this.updateProgress({ phase: 'Identifying Continuation Points', progress: 60 });\n        \n        // Show continuation options\n        await this.showContinuationOptions(existingState);\n        \n        this.updateProgress({ phase: 'Project Analysis Complete', progress: 100 });\n    }\n\n    /**\n     * Execute Task Overview Mode workflow\n     */\n    private async executeTaskOverviewMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Analyzing Task Structure', progress: 30 });\n        \n        // Analyze task management files\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Generating Dashboard', progress: 70 });\n        \n        // Generate task overview dashboard\n        await this.generateTaskDashboard(context.workspaceFolder);\n        \n        this.updateProgress({ phase: 'Task Overview Complete', progress: 100 });\n    }\n\n    /**\n     * Execute Debug Mode workflow\n     */\n    private async executeDebugMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Running Diagnostics', progress: 25 });\n        \n        // Get VS Code diagnostics\n        const diagnostics = vscode.languages.getDiagnostics();\n        const issues = this.processDiagnostics(diagnostics);\n        \n        this.updateProgress({ phase: 'Analyzing Issues', progress: 60 });\n        \n        if (issues.length > 0) {\n            this.statusBar.updateIssues(issues);\n            \n            const action = await vscode.window.showWarningMessage(\n                `Found ${issues.length} issues to resolve`,\n                'View Issues',\n                'Auto-Fix Available',\n                'Continue Analysis'\n            );\n            \n            if (action === 'View Issues') {\n                await vscode.commands.executeCommand('workbench.actions.view.problems');\n            }\n        }\n        \n        this.updateProgress({ phase: 'Debug Analysis Complete', progress: 100 });\n    }\n\n    /**\n     * Execute Continuous Execution Mode workflow\n     */\n    private async executeContinuousExecutionMode(context: ModeExecutionContext): Promise<void> {\n        // Autonomous execution without user prompts\n        this.updateProgress({ phase: 'Autonomous Execution Started', progress: 10 });\n        \n        // Execute workflow phases automatically\n        const phases = ['Analysis', 'Planning', 'Implementation', 'Validation'];\n        \n        for (let i = 0; i < phases.length; i++) {\n            const phase = phases[i];\n            const progress = 25 + (i * 20);\n            \n            this.updateProgress({ phase: `Autonomous ${phase}`, progress });\n            await this.delay(2000); // Simulate work\n        }\n        \n        this.updateProgress({ phase: 'Autonomous Execution Complete', progress: 100 });\n    }\n\n    /**\n     * Execute Feature Gap Analysis Mode workflow\n     */\n    private async executeFeatureGapAnalysisMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Analyzing Current Features', progress: 20 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Comparing with Industry Standards', progress: 50 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Generating Recommendations', progress: 80 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Feature Gap Analysis Complete', progress: 100 });\n        \n        vscode.window.showInformationMessage(\n            'Feature Gap Analysis completed! Check the generated report for improvement recommendations.'\n        );\n    }\n\n    /**\n     * Execute GitHub Integration Mode workflow\n     */\n    private async executeGithubIntegrationMode(context: ModeExecutionContext): Promise<void> {\n        this.updateProgress({ phase: 'Analyzing Repository Structure', progress: 20 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Generating README', progress: 50 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'Creating Documentation', progress: 80 });\n        await this.delay(1000);\n        \n        this.updateProgress({ phase: 'GitHub Integration Complete', progress: 100 });\n        \n        vscode.window.showInformationMessage(\n            'GitHub Integration completed! Professional repository documentation has been generated.'\n        );\n    }\n\n    // Helper methods\n    private async getExistingArtifacts(workspaceFolder: vscode.WorkspaceFolder): Promise<string[]> {\n        const artifacts: string[] = [];\n        const commonFiles = ['README.md', 'prd.md', 'architecture.md', 'checklist.md'];\n        \n        for (const file of commonFiles) {\n            try {\n                const fileUri = vscode.Uri.joinPath(workspaceFolder.uri, file);\n                await vscode.workspace.fs.stat(fileUri);\n                artifacts.push(file);\n            } catch {\n                // File doesn't exist\n            }\n        }\n        \n        return artifacts;\n    }\n\n    private getModeTaskList(mode: BMadMode): string[] {\n        const taskLists: Record<BMadMode, string[]> = {\n            documentation: ['Project Analysis', 'PRD Development', 'Architecture Design', 'Checklist Creation'],\n            fullDevelopment: ['Planning', 'Setup', 'Development', 'Testing', 'Deployment'],\n            continueProject: ['State Analysis', 'Context Restoration', 'Continuation Planning'],\n            taskOverview: ['Task Analysis', 'Dashboard Generation', 'Progress Tracking'],\n            debugMode: ['Diagnostics', 'Issue Analysis', 'Resolution Planning'],\n            continuousExecution: ['Autonomous Analysis', 'Autonomous Planning', 'Autonomous Implementation'],\n            featureGapAnalysis: ['Feature Analysis', 'Gap Identification', 'Recommendation Generation'],\n            githubIntegration: ['Repository Analysis', 'Documentation Generation', 'Workflow Setup']\n        };\n        \n        return taskLists[mode] || [];\n    }\n\n    private async delay(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    private async openGeneratedDocuments(workspaceFolder: vscode.WorkspaceFolder): Promise<void> {\n        const documents = ['prd.md', 'architecture.md', 'checklist.md'];\n        \n        for (const doc of documents) {\n            try {\n                const docUri = vscode.Uri.joinPath(workspaceFolder.uri, doc);\n                await vscode.window.showTextDocument(docUri);\n            } catch (error) {\n                console.log(`Document ${doc} not found or couldn't be opened`);\n            }\n        }\n    }\n\n    private async analyzeExistingProjectState(workspaceFolder: vscode.WorkspaceFolder): Promise<any> {\n        // Analyze existing project state for continuation\n        return {\n            hasExistingTasks: false,\n            completionPercentage: 0,\n            lastModified: new Date()\n        };\n    }\n\n    private async showContinuationOptions(existingState: any): Promise<void> {\n        const options = [\n            'Resume from last checkpoint',\n            'Start new phase',\n            'Review completed work',\n            'Update project scope'\n        ];\n        \n        const selected = await vscode.window.showQuickPick(options, {\n            title: 'Select Continuation Point',\n            placeHolder: 'Choose how to continue the project'\n        });\n        \n        if (selected) {\n            vscode.window.showInformationMessage(`Continuing with: ${selected}`);\n        }\n    }\n\n    private async generateTaskDashboard(workspaceFolder: vscode.WorkspaceFolder): Promise<void> {\n        // Generate task overview dashboard\n        vscode.window.showInformationMessage('Task dashboard generated successfully!');\n    }\n\n    private processDiagnostics(diagnostics: readonly [vscode.Uri, vscode.Diagnostic[]][]): any[] {\n        const issues: any[] = [];\n        \n        for (const [uri, diags] of diagnostics) {\n            for (const diag of diags) {\n                if (diag.severity === vscode.DiagnosticSeverity.Error) {\n                    issues.push({\n                        severity: 'critical',\n                        category: 'quality',\n                        message: diag.message,\n                        file: uri.fsPath,\n                        line: diag.range.start.line,\n                        canAutoFix: false\n                    });\n                }\n            }\n        }\n        \n        return issues;\n    }\n}\n","import * as vscode from 'vscode';\n\n// Core BMAD Types\nexport type BMadMode = \n    | 'documentation'\n    | 'fullDevelopment'\n    | 'continueProject'\n    | 'taskOverview'\n    | 'debugMode'\n    | 'continuousExecution'\n    | 'featureGapAnalysis'\n    | 'githubIntegration';\n\nexport type ProjectType = \n    | 'react-frontend'\n    | 'vue-frontend'\n    | 'angular-frontend'\n    | 'nodejs-api'\n    | 'python-api'\n    | 'rust-api'\n    | 'fullstack-web'\n    | 'mobile-app'\n    | 'desktop-app'\n    | 'library'\n    | 'unknown';\n\nexport type ComplexityLevel = 'simple' | 'moderate' | 'complex' | 'enterprise';\n\nexport type AgentId = 'john' | 'fred' | 'jane' | 'sage' | 'alex' | 'tyler' | 'taylor' | 'sarah' | 'bob' | 'dakota';\n\n// Project Analysis Interface\nexport interface ProjectAnalysis {\n    type: ProjectType;\n    framework: string;\n    language: string;\n    complexity: ComplexityLevel;\n    hasDatabase: boolean;\n    hasAuthentication: boolean;\n    hasFrontend: boolean;\n    hasBackend: boolean;\n    hasDocker: boolean;\n    hasKubernetes: boolean;\n    hasTests: boolean;\n    hasCICD: boolean;\n    dependencies: string[];\n    devDependencies: string[];\n    recommendedMode: BMadMode;\n    recommendedAgents: AgentId[];\n    confidence: number; // 0-1 confidence score\n}\n\n// Agent Configuration\nexport interface AgentConfig {\n    id: AgentId;\n    name: string;\n    title: string;\n    description: string;\n    persona: string;\n    tasks: string[];\n    templates?: string[];\n    checklists?: string[];\n    specializations: string[];\n}\n\n// Agent Selection and Recommendations\nexport interface AgentRecommendation {\n    agent: AgentConfig;\n    reason: string;\n    confidence: number;\n    required: boolean;\n}\n\nexport interface AgentSelection {\n    required: AgentId[];\n    recommended: AgentId[];\n    rationale: string;\n}\n\n// BMAD Configuration\nexport interface BMadConfiguration {\n    autoInitialize: boolean;\n    defaultMode: BMadMode;\n    enableRealTimeMonitoring: boolean;\n    autoActivateRecommendedAgents: boolean;\n    debugModeThreshold: number;\n    progressNotifications: boolean;\n    intelligentRecommendations: boolean;\n    statusBarIntegration: boolean;\n}\n\n// Workspace Analysis Results\nexport interface WorkspaceAnalysisResult {\n    projectAnalysis: ProjectAnalysis;\n    existingBmadSetup: boolean;\n    bmadConfigPath?: string;\n    needsInitialization: boolean;\n    recommendations: {\n        mode: BMadMode;\n        agents: AgentRecommendation[];\n        actions: string[];\n    };\n}\n\n// Progress Tracking\nexport interface WorkflowProgress {\n    mode: BMadMode;\n    phase: string;\n    progress: number; // 0-100\n    currentAgent?: AgentId;\n    estimatedTimeRemaining?: number;\n    completedTasks: string[];\n    remainingTasks: string[];\n}\n\n// Issue Detection\nexport interface ProjectIssue {\n    severity: 'critical' | 'high' | 'medium' | 'low';\n    category: 'security' | 'performance' | 'quality' | 'dependency' | 'configuration';\n    message: string;\n    file?: string;\n    line?: number;\n    suggestedAction?: string;\n    canAutoFix: boolean;\n}\n\n// Mode Execution Context\nexport interface ModeExecutionContext {\n    mode: BMadMode;\n    workspaceFolder: vscode.WorkspaceFolder;\n    projectAnalysis: ProjectAnalysis;\n    selectedAgents: AgentId[];\n    userPreferences: Partial<BMadConfiguration>;\n    existingArtifacts: string[];\n}\n\n// File System Operations\nexport interface BMadFileStructure {\n    bmadAgentPath: string;\n    personasPath: string;\n    tasksPath: string;\n    templatesPath: string;\n    checklistsPath: string;\n    dataPath: string;\n    configPath: string;\n}\n\n// Technology Stack Detection\nexport interface TechnologyStack {\n    frontend: {\n        framework?: string;\n        version?: string;\n        buildTool?: string;\n        packageManager?: string;\n    };\n    backend: {\n        language?: string;\n        framework?: string;\n        version?: string;\n        runtime?: string;\n    };\n    database: {\n        type?: string;\n        version?: string;\n        orm?: string;\n    };\n    infrastructure: {\n        containerization?: string;\n        orchestration?: string;\n        cloudProvider?: string;\n        cicd?: string;\n    };\n    testing: {\n        unitTesting?: string;\n        e2eTesting?: string;\n        coverage?: string;\n    };\n}\n\n// Command Execution Results\nexport interface CommandResult {\n    success: boolean;\n    message: string;\n    data?: any;\n    errors?: string[];\n    warnings?: string[];\n}\n\n// Workspace Monitoring Events\nexport interface WorkspaceEvent {\n    type: 'fileChange' | 'diagnosticChange' | 'configChange' | 'dependencyChange';\n    timestamp: Date;\n    details: any;\n    triggeredActions: string[];\n}\n\n// Agent Handoff Context\nexport interface AgentHandoffContext {\n    fromAgent: AgentId;\n    toAgent: AgentId;\n    currentTask: string;\n    completedWork: string[];\n    pendingWork: string[];\n    contextData: any;\n    handoffReason: string;\n}\n\n// Quick Pick Items for VS Code UI\nexport interface BMadQuickPickItem extends vscode.QuickPickItem {\n    id: string;\n    data?: any;\n}\n\n// Status Bar Information\nexport interface StatusBarInfo {\n    mode?: BMadMode;\n    activeAgents: AgentId[];\n    progress?: WorkflowProgress;\n    issues?: ProjectIssue[];\n    lastUpdate: Date;\n}\n\n// Error Types\nexport class BMadError extends Error {\n    constructor(\n        message: string,\n        public code: string,\n        public category: 'initialization' | 'analysis' | 'execution' | 'configuration' = 'execution'\n    ) {\n        super(message);\n        this.name = 'BMadError';\n    }\n}\n\n// Event Emitter Types\nexport interface BMadEvents {\n    'modeActivated': { mode: BMadMode; agents: AgentId[] };\n    'agentActivated': { agent: AgentId; context: any };\n    'progressUpdated': WorkflowProgress;\n    'issueDetected': ProjectIssue[];\n    'workspaceAnalyzed': WorkspaceAnalysisResult;\n    'configurationChanged': BMadConfiguration;\n}\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { ProjectAnalysis, BMadFileStructure } from '../types/BMadTypes';\n\nexport class BMadInitializer {\n    private readonly BMAD_FOLDER = 'bmad-agent';\n    private analyzer: WorkspaceAnalyzer;\n\n    constructor(analyzer: WorkspaceAnalyzer) {\n        this.analyzer = analyzer;\n    }\n\n    /**\n     * Check if workspace needs BMAD initialization\n     */\n    async checkIfInitializationNeeded(workspaceFolder: vscode.WorkspaceFolder): Promise<boolean> {\n        const bmadPath = path.join(workspaceFolder.uri.fsPath, this.BMAD_FOLDER);\n        \n        try {\n            const bmadUri = vscode.Uri.file(bmadPath);\n            await vscode.workspace.fs.stat(bmadUri);\n            return false; // Directory exists, no initialization needed\n        } catch {\n            return true; // Directory doesn't exist, initialization needed\n        }\n    }\n\n    /**\n     * Initialize BMAD structure in workspace\n     */\n    async initializeWorkspace(workspaceFolder: vscode.WorkspaceFolder): Promise<void> {\n        try {\n            const bmadPath = path.join(workspaceFolder.uri.fsPath, this.BMAD_FOLDER);\n            \n            // Check if already exists\n            if (!(await this.checkIfInitializationNeeded(workspaceFolder))) {\n                await this.validateExistingSetup(bmadPath);\n                return;\n            }\n\n            // Analyze project to determine setup requirements\n            const analysis = await this.analyzer.analyzeProject(workspaceFolder);\n\n            // Create BMAD structure\n            await this.createBmadStructure(bmadPath, analysis);\n\n            // Configure workspace settings\n            await this.configureWorkspaceSettings(workspaceFolder, analysis);\n\n            // Show success notification\n            await this.showInitializationSuccess(analysis);\n\n            console.log(`BMAD initialized successfully for ${workspaceFolder.name}`);\n\n        } catch (error) {\n            console.error('Failed to initialize BMAD workspace:', error);\n            throw new Error(`Failed to initialize BMAD workspace: ${error}`);\n        }\n    }\n\n    /**\n     * Create BMAD folder structure\n     */\n    private async createBmadStructure(bmadPath: string, analysis: ProjectAnalysis): Promise<void> {\n        const folders = ['personas', 'tasks', 'templates', 'checklists', 'data'];\n        \n        // Create main bmad-agent directory\n        await vscode.workspace.fs.createDirectory(vscode.Uri.file(bmadPath));\n\n        // Create subdirectories\n        for (const folder of folders) {\n            const folderPath = path.join(bmadPath, folder);\n            await vscode.workspace.fs.createDirectory(vscode.Uri.file(folderPath));\n        }\n\n        // Copy base templates based on project type\n        await this.copyBaseTemplates(bmadPath, analysis);\n\n        // Generate project-specific configuration\n        await this.generateConfiguration(bmadPath, analysis);\n\n        // Create IDE orchestrator configuration\n        await this.createIdeOrchestratorConfig(bmadPath, analysis);\n    }\n\n    /**\n     * Copy base templates and files\n     */\n    private async copyBaseTemplates(bmadPath: string, analysis: ProjectAnalysis): Promise<void> {\n        // Create basic persona files\n        await this.createPersonaFiles(bmadPath);\n        \n        // Create basic task files\n        await this.createTaskFiles(bmadPath);\n        \n        // Create basic template files\n        await this.createTemplateFiles(bmadPath, analysis);\n        \n        // Create basic checklist files\n        await this.createChecklistFiles(bmadPath);\n        \n        // Create data files\n        await this.createDataFiles(bmadPath);\n    }\n\n    /**\n     * Create basic persona files\n     */\n    private async createPersonaFiles(bmadPath: string): Promise<void> {\n        const personasPath = path.join(bmadPath, 'personas');\n        \n        // Create basic personas based on the enhanced system\n        const personas = [\n            { name: 'bmad.md', content: this.getBmadPersonaContent() },\n            { name: 'pm.md', content: this.getPmPersonaContent() },\n            { name: 'architect.md', content: this.getArchitectPersonaContent() },\n            { name: 'design-architect.md', content: this.getDesignArchitectPersonaContent() },\n            { name: 'security-engineer.md', content: this.getSecurityEngineerPersonaContent() },\n            { name: 'platform-engineer.md', content: this.getPlatformEngineerPersonaContent() },\n            { name: 'task-breakdown-specialist.md', content: this.getTaskBreakdownSpecialistPersonaContent() },\n            { name: 'technical-writer.md', content: this.getTechnicalWriterPersonaContent() }\n        ];\n\n        for (const persona of personas) {\n            const filePath = path.join(personasPath, persona.name);\n            const content = new TextEncoder().encode(persona.content);\n            await vscode.workspace.fs.writeFile(\n                vscode.Uri.file(filePath),\n                content\n            );\n        }\n    }\n\n    /**\n     * Create basic task files\n     */\n    private async createTaskFiles(bmadPath: string): Promise<void> {\n        const tasksPath = path.join(bmadPath, 'tasks');\n        \n        const tasks = [\n            { name: 'documentation-mode-workflow.md', content: this.getDocumentationModeTaskContent() },\n            { name: 'continue-existing-project-workflow.md', content: this.getContinueProjectTaskContent() },\n            { name: 'task-list-overview-workflow.md', content: this.getTaskOverviewTaskContent() },\n            { name: 'debug-troubleshoot-workflow.md', content: this.getDebugTaskContent() }\n        ];\n\n        for (const task of tasks) {\n            const filePath = path.join(tasksPath, task.name);\n            const content = new TextEncoder().encode(task.content);\n            await vscode.workspace.fs.writeFile(\n                vscode.Uri.file(filePath),\n                content\n            );\n        }\n    }\n\n    /**\n     * Create template files based on project type\n     */\n    private async createTemplateFiles(bmadPath: string, analysis: ProjectAnalysis): Promise<void> {\n        const templatesPath = path.join(bmadPath, 'templates');\n        \n        const templates = [\n            { name: 'prd-template.md', content: this.getPrdTemplateContent() },\n            { name: 'architecture-template.md', content: this.getArchitectureTemplateContent(analysis) },\n            { name: 'checklist-template.md', content: this.getChecklistTemplateContent() }\n        ];\n\n        for (const template of templates) {\n            const filePath = path.join(templatesPath, template.name);\n            const content = new TextEncoder().encode(template.content);\n            await vscode.workspace.fs.writeFile(\n                vscode.Uri.file(filePath),\n                content\n            );\n        }\n    }\n\n    /**\n     * Create checklist files\n     */\n    private async createChecklistFiles(bmadPath: string): Promise<void> {\n        const checklistsPath = path.join(bmadPath, 'checklists');\n        \n        const checklists = [\n            { name: 'pm-checklist.md', content: this.getPmChecklistContent() },\n            { name: 'architect-checklist.md', content: this.getArchitectChecklistContent() },\n            { name: 'security-checklist.md', content: this.getSecurityChecklistContent() }\n        ];\n\n        for (const checklist of checklists) {\n            const filePath = path.join(checklistsPath, checklist.name);\n            const content = new TextEncoder().encode(checklist.content);\n            await vscode.workspace.fs.writeFile(\n                vscode.Uri.file(filePath),\n                content\n            );\n        }\n    }\n\n    /**\n     * Create data files\n     */\n    private async createDataFiles(bmadPath: string): Promise<void> {\n        const dataPath = path.join(bmadPath, 'data');\n        \n        const dataFiles = [\n            { name: 'bmad-kb.md', content: this.getBmadKnowledgeBaseContent() }\n        ];\n\n        for (const dataFile of dataFiles) {\n            const filePath = path.join(dataPath, dataFile.name);\n            const content = new TextEncoder().encode(dataFile.content);\n            await vscode.workspace.fs.writeFile(\n                vscode.Uri.file(filePath),\n                content\n            );\n        }\n    }\n\n    /**\n     * Generate project-specific configuration\n     */\n    private async generateConfiguration(bmadPath: string, analysis: ProjectAnalysis): Promise<void> {\n        const config = {\n            projectType: analysis.type,\n            framework: analysis.framework,\n            language: analysis.language,\n            complexity: analysis.complexity,\n            recommendedMode: analysis.recommendedMode,\n            recommendedAgents: analysis.recommendedAgents,\n            autoActivateAgents: true,\n            enableRealTimeMonitoring: true,\n            features: {\n                hasDatabase: analysis.hasDatabase,\n                hasAuthentication: analysis.hasAuthentication,\n                hasFrontend: analysis.hasFrontend,\n                hasBackend: analysis.hasBackend,\n                hasDocker: analysis.hasDocker,\n                hasKubernetes: analysis.hasKubernetes,\n                hasTests: analysis.hasTests,\n                hasCICD: analysis.hasCICD\n            },\n            dependencies: analysis.dependencies,\n            confidence: analysis.confidence,\n            createdAt: new Date().toISOString(),\n            version: '1.0.0'\n        };\n\n        const configPath = path.join(bmadPath, 'bmad-config.json');\n        const content = new TextEncoder().encode(JSON.stringify(config, null, 2));\n        await vscode.workspace.fs.writeFile(\n            vscode.Uri.file(configPath),\n            content\n        );\n    }\n\n    /**\n     * Create IDE orchestrator configuration\n     */\n    private async createIdeOrchestratorConfig(bmadPath: string, analysis: ProjectAnalysis): Promise<void> {\n        const configContent = this.getIdeOrchestratorConfigContent(analysis);\n        const configPath = path.join(bmadPath, 'ide-bmad-orchestrator.cfg.md');\n        const content = new TextEncoder().encode(configContent);\n\n        await vscode.workspace.fs.writeFile(\n            vscode.Uri.file(configPath),\n            content\n        );\n    }\n\n    /**\n     * Configure workspace settings\n     */\n    private async configureWorkspaceSettings(workspaceFolder: vscode.WorkspaceFolder, analysis: ProjectAnalysis): Promise<void> {\n        const config = vscode.workspace.getConfiguration('bmad', workspaceFolder);\n        \n        // Set project-specific defaults\n        await config.update('defaultMode', analysis.recommendedMode, vscode.ConfigurationTarget.Workspace);\n        await config.update('autoActivateRecommendedAgents', true, vscode.ConfigurationTarget.Workspace);\n        \n        // Enable features based on project characteristics\n        if (analysis.complexity === 'complex' || analysis.complexity === 'enterprise') {\n            await config.update('enableRealTimeMonitoring', true, vscode.ConfigurationTarget.Workspace);\n            await config.update('debugModeThreshold', 3, vscode.ConfigurationTarget.Workspace);\n        }\n    }\n\n    /**\n     * Validate existing BMAD setup\n     */\n    private async validateExistingSetup(bmadPath: string): Promise<void> {\n        const requiredFolders = ['personas', 'tasks', 'templates', 'checklists', 'data'];\n        const missingFolders: string[] = [];\n\n        for (const folder of requiredFolders) {\n            try {\n                const folderPath = path.join(bmadPath, folder);\n                await vscode.workspace.fs.stat(vscode.Uri.file(folderPath));\n            } catch {\n                missingFolders.push(folder);\n            }\n        }\n\n        if (missingFolders.length > 0) {\n            const action = await vscode.window.showWarningMessage(\n                `BMAD setup is incomplete. Missing folders: ${missingFolders.join(', ')}. Would you like to repair it?`,\n                'Repair Setup',\n                'Ignore'\n            );\n\n            if (action === 'Repair Setup') {\n                // Create missing folders\n                for (const folder of missingFolders) {\n                    const folderPath = path.join(bmadPath, folder);\n                    await vscode.workspace.fs.createDirectory(vscode.Uri.file(folderPath));\n                }\n            }\n        }\n    }\n\n    /**\n     * Show initialization success message\n     */\n    private async showInitializationSuccess(analysis: ProjectAnalysis): Promise<void> {\n        const message = `BMAD initialized successfully! Detected: ${analysis.framework} ${analysis.type} project. Recommended mode: ${analysis.recommendedMode}`;\n        \n        const action = await vscode.window.showInformationMessage(\n            message,\n            'Activate Recommended Mode',\n            'Select Agents',\n            'OK'\n        );\n\n        if (action === 'Activate Recommended Mode') {\n            await vscode.commands.executeCommand(`bmad.activate${analysis.recommendedMode.charAt(0).toUpperCase() + analysis.recommendedMode.slice(1)}Mode`);\n        } else if (action === 'Select Agents') {\n            await vscode.commands.executeCommand('bmad.selectAgents');\n        }\n    }\n\n    // Content generation methods (simplified versions)\n    private getBmadPersonaContent(): string {\n        return `# Role: BMad - AI Agent Orchestrator\n\n## Core Principles\n1. Orchestrate AI agent selection and activation\n2. Provide guidance on the BMAD Method\n3. Coordinate collaborative intelligence workflows\n4. Maintain project context and continuity\n\n## Responsibilities\n- Mode selection and workflow orchestration\n- Agent coordination and handoffs\n- Progress tracking and status updates\n- Quality assurance and validation\n`;\n    }\n\n    private getPmPersonaContent(): string {\n        return `# Role: Product Manager (John)\n\n## Core Principles\n1. Represent end user needs and business value\n2. Define clear product requirements and specifications\n3. Prioritize features based on user impact\n4. Ensure product-market fit and viability\n\n## Responsibilities\n- Product Requirements Document (PRD) creation\n- Feature prioritization and roadmap planning\n- Stakeholder communication and alignment\n- User story definition and acceptance criteria\n`;\n    }\n\n    private getArchitectPersonaContent(): string {\n        return `# Role: Architect (Fred)\n\n## Core Principles\n1. Design scalable and maintainable system architecture\n2. Make informed technology decisions\n3. Ensure non-functional requirements are met\n4. Balance technical excellence with business needs\n\n## Responsibilities\n- System architecture design and documentation\n- Technology stack selection and evaluation\n- Technical risk assessment and mitigation\n- Code quality standards and best practices\n`;\n    }\n\n    private getDesignArchitectPersonaContent(): string {\n        return `# Role: Design Architect (Jane)\n\n## Core Principles\n1. Create intuitive and accessible user experiences\n2. Design consistent and scalable UI components\n3. Ensure responsive and performant interfaces\n4. Align design with business objectives\n\n## Responsibilities\n- UI/UX specification and design systems\n- Frontend architecture and component design\n- Accessibility and usability standards\n- Design-development collaboration\n`;\n    }\n\n    private getSecurityEngineerPersonaContent(): string {\n        return `# Role: Security Engineer (Sage)\n\n## Core Principles\n1. Implement security by design principles\n2. Identify and mitigate security vulnerabilities\n3. Ensure compliance with security standards\n4. Protect user data and system integrity\n\n## Responsibilities\n- Security architecture review and assessment\n- Vulnerability scanning and penetration testing\n- Security policy and procedure development\n- Incident response and threat analysis\n`;\n    }\n\n    private getPlatformEngineerPersonaContent(): string {\n        return `# Role: Platform Engineer (Alex)\n\n## Core Principles\n1. Build reliable and scalable infrastructure\n2. Automate deployment and operations\n3. Ensure high availability and performance\n4. Optimize costs and resource utilization\n\n## Responsibilities\n- Infrastructure architecture and automation\n- CI/CD pipeline design and implementation\n- Monitoring and observability setup\n- Disaster recovery and backup strategies\n`;\n    }\n\n    private getTaskBreakdownSpecialistPersonaContent(): string {\n        return `# Role: Task Breakdown Specialist (Tyler)\n\n## Core Principles\n1. Break complex work into manageable tasks\n2. Organize workflows for optimal efficiency\n3. Track progress and identify blockers\n4. Facilitate team coordination and handoffs\n\n## Responsibilities\n- Epic and story breakdown and estimation\n- Task dependency mapping and scheduling\n- Progress tracking and status reporting\n- Workflow optimization and improvement\n`;\n    }\n\n    private getTechnicalWriterPersonaContent(): string {\n        return `# Role: Technical Writer (Taylor)\n\n## Core Principles\n1. Create clear and comprehensive documentation\n2. Ensure information accessibility and usability\n3. Maintain documentation quality and consistency\n4. Support developer onboarding and productivity\n\n## Responsibilities\n- Technical documentation creation and maintenance\n- API documentation and developer guides\n- README and repository documentation\n- Documentation standards and style guides\n`;\n    }\n\n    // Task content methods (simplified)\n    private getDocumentationModeTaskContent(): string {\n        return `# Documentation Mode Workflow\n\n## Purpose\nGenerate 3 complete handoff documents through collaborative AI agent intelligence.\n\n## Deliverables\n- prd.md - Product Requirements Document\n- architecture.md - Technical Architecture Document  \n- checklist.md - Development Checklist\n\n## Workflow\n1. Project Analysis & Agent Activation\n2. Collaborative PRD Development\n3. Collaborative Architecture Development\n4. Collaborative Development Checklist\n5. Final Validation & Handoff\n`;\n    }\n\n    private getContinueProjectTaskContent(): string {\n        return `# Continue Existing Project Workflow\n\n## Purpose\nResume work on interrupted projects with full context restoration.\n\n## Workflow\n1. Comprehensive Workspace Analysis\n2. Task Management Analysis\n3. Project Resume Summary Generation\n4. Continuation Point Selection\n5. AI Agent Reactivation\n6. Execution Resumption\n`;\n    }\n\n    private getTaskOverviewTaskContent(): string {\n        return `# Task List Overview Workflow\n\n## Purpose\nProvide comprehensive project status dashboard and task management.\n\n## Workflow\n1. Comprehensive Task Analysis\n2. Project Status Dashboard Generation\n3. Task Complexity and Effort Analysis\n4. Priority and Risk Assessment\n5. Interactive Task Management\n6. Reporting and Export\n`;\n    }\n\n    private getDebugTaskContent(): string {\n        return `# Debug & Troubleshoot Workflow\n\n## Purpose\nSystematic issue diagnosis and resolution through specialist AI collaboration.\n\n## Workflow\n1. Comprehensive Project Health Diagnostics\n2. Issue Classification and Severity Assessment\n3. Security Vulnerability Scanning\n4. Specialist AI Agent Consultation\n5. Automated Analysis and Testing\n6. Issue Resolution Planning\n7. Interactive Debugging Support\n`;\n    }\n\n    // Template content methods (simplified)\n    private getPrdTemplateContent(): string {\n        return `# Product Requirements Document\n\n## Project Overview\n[Project description and objectives]\n\n## User Stories\n[User stories and acceptance criteria]\n\n## Technical Requirements\n[Technical specifications and constraints]\n\n## Success Metrics\n[Key performance indicators and success criteria]\n`;\n    }\n\n    private getArchitectureTemplateContent(analysis: ProjectAnalysis): string {\n        return `# Technical Architecture Document\n\n## System Overview\nProject Type: ${analysis.type}\nFramework: ${analysis.framework}\nLanguage: ${analysis.language}\n\n## Architecture Decisions\n[Key architectural decisions and rationale]\n\n## Technology Stack\n[Selected technologies and justification]\n\n## System Design\n[High-level system design and components]\n\n## Implementation Plan\n[Development approach and milestones]\n`;\n    }\n\n    private getChecklistTemplateContent(): string {\n        return `# Development Checklist\n\n## Planning Phase\n- [ ] Requirements analysis complete\n- [ ] Architecture design approved\n- [ ] Technology stack selected\n\n## Development Phase\n- [ ] Core functionality implemented\n- [ ] Testing framework setup\n- [ ] Security measures implemented\n\n## Deployment Phase\n- [ ] Production environment configured\n- [ ] Monitoring and logging setup\n- [ ] Documentation complete\n`;\n    }\n\n    private getPmChecklistContent(): string {\n        return `# Product Manager Checklist\n\n## Requirements Gathering\n- [ ] Stakeholder interviews conducted\n- [ ] User personas defined\n- [ ] Use cases documented\n\n## PRD Development\n- [ ] Business objectives defined\n- [ ] Success metrics established\n- [ ] Technical requirements specified\n`;\n    }\n\n    private getArchitectChecklistContent(): string {\n        return `# Architect Checklist\n\n## Architecture Design\n- [ ] System architecture documented\n- [ ] Technology decisions justified\n- [ ] Non-functional requirements addressed\n\n## Technical Review\n- [ ] Security considerations evaluated\n- [ ] Performance requirements defined\n- [ ] Scalability plan established\n`;\n    }\n\n    private getSecurityChecklistContent(): string {\n        return `# Security Checklist\n\n## Security Assessment\n- [ ] Threat model created\n- [ ] Vulnerability assessment completed\n- [ ] Security controls implemented\n\n## Compliance Review\n- [ ] Regulatory requirements reviewed\n- [ ] Data protection measures implemented\n- [ ] Security policies documented\n`;\n    }\n\n    private getBmadKnowledgeBaseContent(): string {\n        return `# BMAD Knowledge Base\n\n## BMAD Method Overview\nThe Breakthrough Method of Agile (AI-driven) Development (BMAD) is a comprehensive framework for managing software projects using collaborative AI agents.\n\n## Core Principles\n1. Collaborative Intelligence\n2. Iterative Development\n3. Quality Assurance\n4. Continuous Improvement\n\n## AI Agent Roles\n- Product Manager (John): Requirements and planning\n- Architect (Fred): Technical design and architecture\n- Design Architect (Jane): UI/UX and frontend\n- Security Engineer (Sage): Security and compliance\n- Platform Engineer (Alex): Infrastructure and DevOps\n- Task Breakdown Specialist (Tyler): Task management\n- Technical Writer (Taylor): Documentation\n`;\n    }\n\n    private getIdeOrchestratorConfigContent(analysis: ProjectAnalysis): string {\n        return `# Configuration for IDE Agents\n\n## Data Resolution\nagent-root: (project-root)/bmad-agent\nchecklists: (agent-root)/checklists\ndata: (agent-root)/data\npersonas: (agent-root)/personas\ntasks: (agent-root)/tasks\ntemplates: (agent-root)/templates\n\n## Agent Definitions\n\n### Product Manager\n- Name: John\n- Description: Product requirements and planning\n- Persona: pm.md\n- Tasks: [Create PRD], [Correct Course]\n\n### Architect  \n- Name: Fred\n- Description: System architecture and technical design\n- Persona: architect.md\n- Tasks: [Create Architecture], [Technical Review]\n\n### Design Architect\n- Name: Jane\n- Description: UI/UX and frontend architecture\n- Persona: design-architect.md\n- Tasks: [Create Frontend Architecture], [UI Specification]\n`;\n    }\n}\n","import * as vscode from 'vscode';\nimport { BMadOrchestrator } from './orchestrator/BMadOrchestrator';\nimport { WorkspaceAnalyzer } from './analysis/WorkspaceAnalyzer';\nimport { CommandManager } from './commands/CommandManager';\nimport { StatusBarManager } from './ui/StatusBarManager';\nimport { WorkspaceMonitor } from './monitoring/WorkspaceMonitor';\nimport { ConfigurationManager } from './config/ConfigurationManager';\nimport { BMadInitializer } from './orchestrator/BMadInitializer';\nimport { AugmentIntegration } from './integration/AugmentIntegration';\nimport { AugmentMenuIntegration } from './integration/AugmentMenuIntegration';\n\nlet orchestrator: BMadOrchestrator;\nlet analyzer: WorkspaceAnalyzer;\nlet commandManager: CommandManager;\nlet statusBar: StatusBarManager;\nlet monitor: WorkspaceMonitor;\nlet configManager: ConfigurationManager;\nlet initializer: BMadInitializer;\nlet augmentIntegration: AugmentIntegration;\nlet augmentMenuIntegration: AugmentMenuIntegration;\n\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n    console.log('BMAD AI Agent Orchestrator is now active!');\n\n    try {\n        // Initialize core components\n        configManager = new ConfigurationManager();\n        analyzer = new WorkspaceAnalyzer();\n        statusBar = new StatusBarManager();\n        initializer = new BMadInitializer(analyzer);\n        orchestrator = new BMadOrchestrator(context, analyzer, statusBar, initializer);\n        commandManager = new CommandManager(orchestrator, analyzer, statusBar);\n        monitor = new WorkspaceMonitor(analyzer, orchestrator, statusBar);\n\n        // Initialize Augment integration\n        augmentIntegration = new AugmentIntegration(orchestrator, analyzer, statusBar);\n        augmentMenuIntegration = new AugmentMenuIntegration(orchestrator, analyzer);\n\n        // Register all commands\n        await commandManager.registerCommands(context);\n\n        // Initialize status bar\n        statusBar.initialize();\n\n        // Set context for when clauses using modern API\n        await vscode.commands.executeCommand('setContext', 'bmadEnabled', true);\n\n        // Auto-initialize workspace if enabled and workspace folders exist\n        const config = configManager.getConfiguration();\n        if (config.autoInitialize && vscode.workspace.workspaceFolders) {\n            await autoInitializeWorkspaces();\n        }\n\n        // Start workspace monitoring if enabled\n        if (config.enableRealTimeMonitoring) {\n            await monitor.startMonitoring();\n        }\n\n        // Initialize Augment integration\n        await augmentIntegration.initialize();\n\n        // Show welcome message for first-time users\n        await showWelcomeMessage(context);\n\n        console.log('BMAD AI Agent Orchestrator activated successfully');\n\n    } catch (error) {\n        console.error('Failed to activate BMAD extension:', error);\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        await vscode.window.showErrorMessage(`Failed to activate BMAD extension: ${errorMessage}`);\n    }\n}\n\nexport function deactivate(): void {\n    console.log('BMAD AI Agent Orchestrator is now deactivated');\n\n    // Clean up resources in proper order\n    try {\n        if (monitor) {\n            monitor.dispose();\n        }\n        if (statusBar) {\n            statusBar.dispose();\n        }\n        if (configManager) {\n            configManager.dispose();\n        }\n        if (augmentIntegration) {\n            augmentIntegration.dispose();\n        }\n        if (augmentMenuIntegration) {\n            augmentMenuIntegration.dispose();\n        }\n    } catch (error) {\n        console.error('Error during deactivation:', error);\n    }\n}\n\nasync function autoInitializeWorkspaces(): Promise<void> {\n    if (!vscode.workspace.workspaceFolders) {\n        return;\n    }\n\n    for (const folder of vscode.workspace.workspaceFolders) {\n        try {\n            const needsInitialization = await initializer.checkIfInitializationNeeded(folder);\n            if (needsInitialization) {\n                await initializer.initializeWorkspace(folder);\n            }\n        } catch (error) {\n            console.error(`Failed to auto-initialize workspace ${folder.name}:`, error);\n        }\n    }\n}\n\nasync function showWelcomeMessage(context: vscode.ExtensionContext): Promise<void> {\n    const hasShownWelcome = context.globalState.get('bmad.hasShownWelcome', false);\n\n    if (!hasShownWelcome) {\n        const action = await vscode.window.showInformationMessage(\n            'Welcome to BMAD AI Agent Orchestrator! Would you like to see the quick start guide?',\n            { modal: false },\n            'Show Guide',\n            'Quick Setup',\n            'Later'\n        );\n\n        if (action === 'Show Guide') {\n            await vscode.env.openExternal(\n                vscode.Uri.parse('https://github.com/bmadcode/BMAD-METHOD#readme')\n            );\n        } else if (action === 'Quick Setup') {\n            await vscode.commands.executeCommand('bmad.autoSetup');\n        }\n\n        await context.globalState.update('bmad.hasShownWelcome', true);\n    }\n}\n\n// Export for testing\nexport {\n    orchestrator,\n    analyzer,\n    commandManager,\n    statusBar,\n    monitor,\n    configManager,\n    initializer\n};\n","import * as vscode from 'vscode';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { BMadOrchestrator } from '../orchestrator/BMadOrchestrator';\nimport { StatusBarManager } from '../ui/StatusBarManager';\nimport { ProjectIssue, WorkspaceEvent, AgentId } from '../types/BMadTypes';\n\nexport class WorkspaceMonitor {\n    private analyzer: WorkspaceAnalyzer;\n    private orchestrator: BMadOrchestrator;\n    private statusBar: StatusBarManager;\n    \n    private fileWatcher?: vscode.FileSystemWatcher;\n    private diagnosticWatcher?: vscode.Disposable;\n    private configWatcher?: vscode.Disposable;\n    \n    private changeTimeout?: NodeJS.Timeout;\n    private isMonitoring = false;\n    private lastAnalysis?: Date;\n\n    constructor(\n        analyzer: WorkspaceAnalyzer,\n        orchestrator: BMadOrchestrator,\n        statusBar: StatusBarManager\n    ) {\n        this.analyzer = analyzer;\n        this.orchestrator = orchestrator;\n        this.statusBar = statusBar;\n    }\n\n    /**\n     * Start monitoring workspace for changes\n     */\n    async startMonitoring(): Promise<void> {\n        if (this.isMonitoring) {\n            return;\n        }\n\n        try {\n            // Monitor project configuration files\n            this.setupFileWatcher();\n            \n            // Monitor VS Code diagnostics\n            this.setupDiagnosticWatcher();\n            \n            // Monitor configuration changes\n            this.setupConfigurationWatcher();\n            \n            this.isMonitoring = true;\n            console.log('BMAD workspace monitoring started');\n\n        } catch (error) {\n            console.error('Failed to start workspace monitoring:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Stop monitoring workspace\n     */\n    stopMonitoring(): void {\n        if (!this.isMonitoring) {\n            return;\n        }\n\n        this.dispose();\n        this.isMonitoring = false;\n        console.log('BMAD workspace monitoring stopped');\n    }\n\n    /**\n     * Check if monitoring is active\n     */\n    isActive(): boolean {\n        return this.isMonitoring;\n    }\n\n    /**\n     * Setup file system watcher for project files\n     */\n    private setupFileWatcher(): void {\n        // Watch for changes in key project files\n        this.fileWatcher = vscode.workspace.createFileSystemWatcher(\n            '**/{package.json,requirements.txt,Cargo.toml,pom.xml,*.csproj,Dockerfile,docker-compose.yml,.env}'\n        );\n\n        this.fileWatcher.onDidChange(this.onConfigFileChange.bind(this));\n        this.fileWatcher.onDidCreate(this.onConfigFileCreate.bind(this));\n        this.fileWatcher.onDidDelete(this.onConfigFileDelete.bind(this));\n    }\n\n    /**\n     * Setup diagnostic watcher for issue detection\n     */\n    private setupDiagnosticWatcher(): void {\n        this.diagnosticWatcher = vscode.languages.onDidChangeDiagnostics(\n            this.onDiagnosticsChange.bind(this)\n        );\n    }\n\n    /**\n     * Setup configuration watcher\n     */\n    private setupConfigurationWatcher(): void {\n        this.configWatcher = vscode.workspace.onDidChangeConfiguration((event) => {\n            if (event.affectsConfiguration('bmad')) {\n                this.onBmadConfigurationChange();\n            }\n        });\n    }\n\n    /**\n     * Handle configuration file changes\n     */\n    private async onConfigFileChange(uri: vscode.Uri): Promise<void> {\n        this.emitWorkspaceEvent('fileChange', { uri: uri.fsPath, type: 'change' });\n        \n        // Debounce rapid changes\n        if (this.changeTimeout) {\n            clearTimeout(this.changeTimeout);\n        }\n\n        this.changeTimeout = setTimeout(async () => {\n            try {\n                await this.analyzeProjectChanges(uri);\n            } catch (error) {\n                console.error('Failed to analyze project changes:', error);\n            }\n        }, 1000);\n    }\n\n    /**\n     * Handle configuration file creation\n     */\n    private async onConfigFileCreate(uri: vscode.Uri): Promise<void> {\n        this.emitWorkspaceEvent('fileChange', { uri: uri.fsPath, type: 'create' });\n        \n        const fileName = uri.fsPath.split('/').pop() || '';\n        \n        // Show notification for important file creation\n        if (['package.json', 'requirements.txt', 'Dockerfile'].includes(fileName)) {\n            const action = await vscode.window.showInformationMessage(\n                `New ${fileName} detected. Would you like to re-analyze the project?`,\n                'Re-analyze',\n                'Later'\n            );\n\n            if (action === 'Re-analyze') {\n                await this.analyzeProjectChanges(uri);\n            }\n        }\n    }\n\n    /**\n     * Handle configuration file deletion\n     */\n    private async onConfigFileDelete(uri: vscode.Uri): Promise<void> {\n        this.emitWorkspaceEvent('fileChange', { uri: uri.fsPath, type: 'delete' });\n        \n        const fileName = uri.fsPath.split('/').pop() || '';\n        \n        // Show warning for important file deletion\n        if (['package.json', 'requirements.txt'].includes(fileName)) {\n            vscode.window.showWarningMessage(\n                `Important file ${fileName} was deleted. This may affect project analysis.`\n            );\n        }\n    }\n\n    /**\n     * Handle VS Code diagnostics changes\n     */\n    private async onDiagnosticsChange(event: vscode.DiagnosticChangeEvent): Promise<void> {\n        this.emitWorkspaceEvent('diagnosticChange', { \n            changedUris: event.uris.map(uri => uri.fsPath) \n        });\n\n        // Get current diagnostics\n        const allDiagnostics = vscode.languages.getDiagnostics();\n        const issues = this.processDiagnostics(allDiagnostics);\n        \n        // Update status bar with issues\n        this.statusBar.updateIssues(issues);\n        \n        // Check if we should suggest debug mode\n        const criticalIssues = issues.filter(issue => issue.severity === 'critical');\n        const config = vscode.workspace.getConfiguration('bmad');\n        const threshold = config.get('debugModeThreshold', 5);\n        \n        if (criticalIssues.length >= threshold) {\n            await this.suggestDebugMode(criticalIssues);\n        }\n    }\n\n    /**\n     * Handle BMAD configuration changes\n     */\n    private onBmadConfigurationChange(): void {\n        this.emitWorkspaceEvent('configChange', { \n            section: 'bmad',\n            timestamp: new Date().toISOString()\n        });\n\n        const config = vscode.workspace.getConfiguration('bmad');\n        \n        // Update monitoring based on configuration\n        if (!config.get('enableRealTimeMonitoring', true)) {\n            this.stopMonitoring();\n        }\n        \n        console.log('BMAD configuration updated');\n    }\n\n    /**\n     * Analyze project changes and suggest actions\n     */\n    private async analyzeProjectChanges(changedUri: vscode.Uri): Promise<void> {\n        try {\n            // Prevent too frequent analysis\n            if (this.lastAnalysis && Date.now() - this.lastAnalysis.getTime() < 5000) {\n                return;\n            }\n\n            this.lastAnalysis = new Date();\n            \n            // Re-analyze workspace\n            const analysis = await this.analyzer.analyzeWorkspace();\n            \n            // Check if recommendations have changed\n            const currentMode = this.orchestrator.getCurrentMode();\n            const recommendedMode = analysis.projectAnalysis.recommendedMode;\n            \n            if (currentMode && currentMode !== recommendedMode) {\n                await this.suggestModeChange(currentMode, recommendedMode);\n            }\n            \n            // Check for new agent recommendations\n            const activeAgents = this.orchestrator.getActiveAgents();\n            const recommendedAgents = analysis.projectAnalysis.recommendedAgents;\n            \n            const newAgents = recommendedAgents.filter(agent => !activeAgents.includes(agent));\n            if (newAgents.length > 0) {\n                await this.suggestNewAgents(newAgents);\n            }\n\n        } catch (error) {\n            console.error('Failed to analyze project changes:', error);\n        }\n    }\n\n    /**\n     * Suggest debug mode activation\n     */\n    private async suggestDebugMode(criticalIssues: ProjectIssue[]): Promise<void> {\n        const config = vscode.workspace.getConfiguration('bmad');\n        if (!config.get('intelligentRecommendations', true)) {\n            return;\n        }\n\n        const action = await vscode.window.showWarningMessage(\n            `${criticalIssues.length} critical issues detected. Activate Debug & Troubleshoot mode?`,\n            'Activate Debug Mode',\n            'Show Issues',\n            'Dismiss'\n        );\n\n        if (action === 'Activate Debug Mode') {\n            await vscode.commands.executeCommand('bmad.debugMode');\n            this.emitWorkspaceEvent('diagnosticChange', ['debug-mode-activated']);\n        } else if (action === 'Show Issues') {\n            await vscode.commands.executeCommand('workbench.actions.view.problems');\n        }\n    }\n\n    /**\n     * Suggest mode change\n     */\n    private async suggestModeChange(currentMode: string, recommendedMode: string): Promise<void> {\n        const config = vscode.workspace.getConfiguration('bmad');\n        if (!config.get('intelligentRecommendations', true)) {\n            return;\n        }\n\n        const action = await vscode.window.showInformationMessage(\n            `Project changes detected. Consider switching from ${currentMode} to ${recommendedMode} mode?`,\n            'Switch Mode',\n            'Keep Current',\n            'Don\\'t Ask Again'\n        );\n\n        if (action === 'Switch Mode') {\n            await vscode.commands.executeCommand(`bmad.activate${recommendedMode.charAt(0).toUpperCase() + recommendedMode.slice(1)}Mode`);\n            this.emitWorkspaceEvent('configChange', ['mode-switched', currentMode, recommendedMode]);\n        } else if (action === 'Don\\'t Ask Again') {\n            await config.update('intelligentRecommendations', false, vscode.ConfigurationTarget.Workspace);\n        }\n    }\n\n    /**\n     * Suggest new agents\n     */\n    private async suggestNewAgents(newAgents: string[]): Promise<void> {\n        const config = vscode.workspace.getConfiguration('bmad');\n        if (!config.get('intelligentRecommendations', true)) {\n            return;\n        }\n\n        const agentNames = newAgents.map(id => this.getAgentDisplayName(id)).join(', ');\n        \n        const action = await vscode.window.showInformationMessage(\n            `New agents recommended based on project changes: ${agentNames}`,\n            'Activate Agents',\n            'Review Agents',\n            'Ignore'\n        );\n\n        if (action === 'Activate Agents') {\n            const currentAgents = this.orchestrator.getActiveAgents();\n            const validAgents = newAgents as AgentId[];\n            await this.orchestrator.activateAgents([...currentAgents, ...validAgents]);\n            this.emitWorkspaceEvent('configChange', ['agents-added', ...newAgents]);\n        } else if (action === 'Review Agents') {\n            await vscode.commands.executeCommand('bmad.selectAgents');\n        }\n    }\n\n    /**\n     * Process VS Code diagnostics into project issues\n     */\n    private processDiagnostics(diagnostics: readonly [vscode.Uri, vscode.Diagnostic[]][]): ProjectIssue[] {\n        const issues: ProjectIssue[] = [];\n        \n        for (const [uri, diags] of diagnostics) {\n            for (const diag of diags) {\n                let severity: 'critical' | 'high' | 'medium' | 'low';\n                \n                switch (diag.severity) {\n                    case vscode.DiagnosticSeverity.Error:\n                        severity = 'critical';\n                        break;\n                    case vscode.DiagnosticSeverity.Warning:\n                        severity = 'high';\n                        break;\n                    case vscode.DiagnosticSeverity.Information:\n                        severity = 'medium';\n                        break;\n                    case vscode.DiagnosticSeverity.Hint:\n                        severity = 'low';\n                        break;\n                    default:\n                        severity = 'medium';\n                }\n\n                issues.push({\n                    severity,\n                    category: this.categorizeIssue(diag),\n                    message: diag.message,\n                    file: uri.fsPath,\n                    line: diag.range.start.line + 1,\n                    canAutoFix: diag.code !== undefined\n                });\n            }\n        }\n        \n        return issues;\n    }\n\n    /**\n     * Categorize diagnostic issue\n     */\n    private categorizeIssue(diagnostic: vscode.Diagnostic): 'security' | 'performance' | 'quality' | 'dependency' | 'configuration' {\n        const message = diagnostic.message.toLowerCase();\n        \n        if (message.includes('security') || message.includes('vulnerability')) {\n            return 'security';\n        }\n        if (message.includes('performance') || message.includes('slow')) {\n            return 'performance';\n        }\n        if (message.includes('dependency') || message.includes('import')) {\n            return 'dependency';\n        }\n        if (message.includes('config') || message.includes('setting')) {\n            return 'configuration';\n        }\n        \n        return 'quality';\n    }\n\n    /**\n     * Emit workspace event\n     */\n    private emitWorkspaceEvent(type: WorkspaceEvent['type'], details: any): void {\n        const event: WorkspaceEvent = {\n            type,\n            timestamp: new Date(),\n            details,\n            triggeredActions: []\n        };\n        \n        // Emit internal event\n        vscode.commands.executeCommand('bmad.internal.workspaceEvent', event);\n    }\n\n    /**\n     * Get agent display name\n     */\n    private getAgentDisplayName(agentId: string): string {\n        const agentNames: Record<string, string> = {\n            john: 'John (Product Manager)',\n            fred: 'Fred (Architect)',\n            jane: 'Jane (Design Architect)',\n            sage: 'Sage (Security Engineer)',\n            alex: 'Alex (Platform Engineer)',\n            tyler: 'Tyler (Task Breakdown Specialist)',\n            taylor: 'Taylor (Technical Writer)',\n            sarah: 'Sarah (Product Owner)',\n            bob: 'Bob (Scrum Master)'\n        };\n        return agentNames[agentId] || agentId;\n    }\n\n    /**\n     * Dispose of all watchers and resources\n     */\n    dispose(): void {\n        if (this.fileWatcher) {\n            this.fileWatcher.dispose();\n            this.fileWatcher = undefined;\n        }\n        \n        if (this.diagnosticWatcher) {\n            this.diagnosticWatcher.dispose();\n            this.diagnosticWatcher = undefined;\n        }\n        \n        if (this.configWatcher) {\n            this.configWatcher.dispose();\n            this.configWatcher = undefined;\n        }\n        \n        if (this.changeTimeout) {\n            clearTimeout(this.changeTimeout);\n            this.changeTimeout = undefined;\n        }\n    }\n}\n","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Context7Integration, Context7ResearchResult } from '../integration/Context7Integration';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { StatusBarManager } from '../ui/StatusBarManager';\nimport { DependencyMonitor } from '../monitoring/DependencyMonitor';\n\n/**\n * Dakota - Dependency Modernization Specialist Agent\n * Handles automated dependency analysis, modernization, and maintenance\n * with seamless Context7 integration for intelligent research\n */\n\nexport interface DependencyInfo {\n    name: string;\n    currentVersion: string;\n    latestVersion?: string;\n    type: 'production' | 'development' | 'peer' | 'optional';\n    ecosystem: string;\n    vulnerabilities?: VulnerabilityInfo[];\n    maintenanceStatus?: 'well-maintained' | 'moderate' | 'poor' | 'abandoned';\n    licenseInfo?: LicenseInfo;\n    updateRecommendation?: UpdateRecommendation;\n}\n\nexport interface VulnerabilityInfo {\n    id: string;\n    severity: 'critical' | 'high' | 'medium' | 'low';\n    title: string;\n    description: string;\n    patchedVersions?: string[];\n    cveId?: string;\n}\n\nexport interface LicenseInfo {\n    license: string;\n    compatible: boolean;\n    concerns?: string[];\n}\n\nexport interface UpdateRecommendation {\n    action: 'auto-update' | 'manual-review' | 'hold' | 'replace';\n    targetVersion?: string;\n    reasoning: string;\n    riskLevel: 'low' | 'medium' | 'high' | 'critical';\n    migrationComplexity?: 'simple' | 'moderate' | 'complex';\n    context7Research?: Context7ResearchResult;\n}\n\nexport interface DependencyAuditResult {\n    projectPath: string;\n    timestamp: Date;\n    totalDependencies: number;\n    vulnerabilities: VulnerabilityInfo[];\n    outdatedPackages: DependencyInfo[];\n    recommendations: UpdateRecommendation[];\n    healthScore: number;\n    context7Insights: Context7ResearchResult[];\n}\n\n/**\n * Dakota Agent - Dependency Modernization Specialist\n */\nexport class DakotaAgent {\n    private context7: Context7Integration;\n    private analyzer: WorkspaceAnalyzer;\n    private statusBar: StatusBarManager;\n    private dependencyMonitor: DependencyMonitor;\n    private isMonitoring: boolean = false;\n\n    constructor(\n        analyzer: WorkspaceAnalyzer,\n        statusBar: StatusBarManager,\n        context7Config?: any\n    ) {\n        this.analyzer = analyzer;\n        this.statusBar = statusBar;\n        this.context7 = new Context7Integration(context7Config);\n        this.dependencyMonitor = new DependencyMonitor(this.context7, statusBar);\n\n        console.log('Dakota Agent (Dependency Modernization Specialist) initialized');\n    }\n\n    /**\n     * Perform comprehensive dependency audit\n     */\n    async performDependencyAudit(projectPath?: string): Promise<DependencyAuditResult> {\n        const workspacePath = projectPath || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n        if (!workspacePath) {\n            throw new Error('No workspace found for dependency audit');\n        }\n\n        this.statusBar.showLoading('Dakota: Analyzing dependencies...');\n\n        try {\n            const startTime = Date.now();\n            const dependencies = await this.discoverDependencies(workspacePath);\n            const context7Insights: Context7ResearchResult[] = [];\n\n            // Perform security analysis with Context7 research\n            const vulnerabilities: VulnerabilityInfo[] = [];\n            for (const dep of dependencies) {\n                // Context7 security research\n                const securityResearch = await this.context7.securityResearch(\n                    dep.name, \n                    dep.currentVersion, \n                    dep.ecosystem\n                );\n                \n                if (securityResearch) {\n                    context7Insights.push(securityResearch);\n                    \n                    // Extract vulnerabilities from research\n                    const vulns = this.extractVulnerabilitiesFromResearch(securityResearch);\n                    vulnerabilities.push(...vulns);\n                }\n\n                // Check for updates and generate recommendations\n                const updateRecommendation = await this.generateUpdateRecommendation(dep);\n                dep.updateRecommendation = updateRecommendation;\n            }\n\n            // Calculate health score\n            const healthScore = this.calculateHealthScore(dependencies, vulnerabilities);\n\n            // Generate recommendations\n            const recommendations = dependencies\n                .filter(dep => dep.updateRecommendation)\n                .map(dep => dep.updateRecommendation!)\n                .sort((a, b) => this.prioritizeRecommendations(a, b));\n\n            const result: DependencyAuditResult = {\n                projectPath: workspacePath,\n                timestamp: new Date(),\n                totalDependencies: dependencies.length,\n                vulnerabilities,\n                outdatedPackages: dependencies.filter(dep => dep.latestVersion && dep.currentVersion !== dep.latestVersion),\n                recommendations,\n                healthScore,\n                context7Insights\n            };\n\n            this.statusBar.showSuccess(`Dakota: Audit complete - ${dependencies.length} dependencies analyzed`);\n            \n            // Generate and save audit report\n            await this.generateAuditReport(result);\n            \n            return result;\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Audit failed - ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Perform dependency modernization based on audit results\n     */\n    async performDependencyModernization(auditResult: DependencyAuditResult): Promise<void> {\n        this.statusBar.showLoading('Dakota: Modernizing dependencies...');\n\n        try {\n            const autoUpdates = auditResult.recommendations.filter(rec => rec.action === 'auto-update');\n            const manualReviews = auditResult.recommendations.filter(rec => rec.action === 'manual-review');\n\n            // Process automatic updates\n            for (const update of autoUpdates) {\n                await this.executeAutomaticUpdate(update);\n            }\n\n            // Present manual reviews to user\n            if (manualReviews.length > 0) {\n                await this.presentManualReviews(manualReviews);\n            }\n\n            this.statusBar.showSuccess(`Dakota: Modernization complete - ${autoUpdates.length} auto-updates, ${manualReviews.length} manual reviews`);\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Modernization failed - ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Start background dependency monitoring\n     */\n    async startDependencyMonitoring(): Promise<void> {\n        if (this.isMonitoring) {\n            return;\n        }\n\n        this.isMonitoring = true;\n        await this.dependencyMonitor.startMonitoring();\n        this.statusBar.showInfo('Dakota: Background monitoring started');\n    }\n\n    /**\n     * Stop background dependency monitoring\n     */\n    stopDependencyMonitoring(): void {\n        this.dependencyMonitor.stopMonitoring();\n        this.isMonitoring = false;\n        this.statusBar.showInfo('Dakota: Background monitoring stopped');\n    }\n\n    /**\n     * Discover dependencies in the project\n     */\n    private async discoverDependencies(projectPath: string): Promise<DependencyInfo[]> {\n        const dependencies: DependencyInfo[] = [];\n\n        // Check for different package managers and ecosystems\n        const packageManagers = [\n            { file: 'package.json', ecosystem: 'npm' },\n            { file: 'requirements.txt', ecosystem: 'pip' },\n            { file: 'pyproject.toml', ecosystem: 'poetry' },\n            { file: 'Cargo.toml', ecosystem: 'cargo' },\n            { file: 'go.mod', ecosystem: 'go' },\n            { file: 'pom.xml', ecosystem: 'maven' },\n            { file: 'build.gradle', ecosystem: 'gradle' },\n            { file: 'composer.json', ecosystem: 'composer' },\n            { file: 'Gemfile', ecosystem: 'bundler' }\n        ];\n\n        for (const pm of packageManagers) {\n            const filePath = path.join(projectPath, pm.file);\n            if (fs.existsSync(filePath)) {\n                const deps = await this.parseDependencyFile(filePath, pm.ecosystem);\n                dependencies.push(...deps);\n            }\n        }\n\n        return dependencies;\n    }\n\n    /**\n     * Parse dependency file based on ecosystem\n     */\n    private async parseDependencyFile(filePath: string, ecosystem: string): Promise<DependencyInfo[]> {\n        const dependencies: DependencyInfo[] = [];\n\n        try {\n            const content = fs.readFileSync(filePath, 'utf8');\n\n            switch (ecosystem) {\n                case 'npm':\n                    const packageJson = JSON.parse(content);\n                    \n                    // Production dependencies\n                    if (packageJson.dependencies) {\n                        for (const [name, version] of Object.entries(packageJson.dependencies)) {\n                            dependencies.push({\n                                name,\n                                currentVersion: version as string,\n                                type: 'production',\n                                ecosystem\n                            });\n                        }\n                    }\n\n                    // Development dependencies\n                    if (packageJson.devDependencies) {\n                        for (const [name, version] of Object.entries(packageJson.devDependencies)) {\n                            dependencies.push({\n                                name,\n                                currentVersion: version as string,\n                                type: 'development',\n                                ecosystem\n                            });\n                        }\n                    }\n\n                    // Peer dependencies\n                    if (packageJson.peerDependencies) {\n                        for (const [name, version] of Object.entries(packageJson.peerDependencies)) {\n                            dependencies.push({\n                                name,\n                                currentVersion: version as string,\n                                type: 'peer',\n                                ecosystem\n                            });\n                        }\n                    }\n                    break;\n\n                // Add other ecosystem parsers as needed\n                default:\n                    console.warn(`Dakota: Unsupported ecosystem ${ecosystem} for file ${filePath}`);\n            }\n\n        } catch (error) {\n            console.error(`Dakota: Failed to parse ${filePath}:`, error);\n        }\n\n        return dependencies;\n    }\n\n    /**\n     * Generate update recommendation for a dependency\n     */\n    private async generateUpdateRecommendation(dependency: DependencyInfo): Promise<UpdateRecommendation> {\n        // Get latest version information\n        const latestVersion = await this.getLatestVersion(dependency);\n        dependency.latestVersion = latestVersion;\n\n        // If already up to date\n        if (dependency.currentVersion === latestVersion) {\n            return {\n                action: 'hold',\n                reasoning: 'Already at latest version',\n                riskLevel: 'low'\n            };\n        }\n\n        // Context7 research for update strategy\n        const updateResearch = await this.context7.updateResearch(\n            dependency.name,\n            dependency.currentVersion,\n            latestVersion || 'latest',\n            dependency.ecosystem\n        );\n\n        // Analyze version difference\n        const versionDiff = this.analyzeVersionDifference(dependency.currentVersion, latestVersion || '');\n        \n        let action: UpdateRecommendation['action'] = 'manual-review';\n        let riskLevel: UpdateRecommendation['riskLevel'] = 'medium';\n\n        // Determine action based on version difference and research\n        if (versionDiff.type === 'patch' && !versionDiff.hasBreakingChanges) {\n            action = 'auto-update';\n            riskLevel = 'low';\n        } else if (versionDiff.type === 'minor' && !versionDiff.hasBreakingChanges) {\n            action = 'auto-update';\n            riskLevel = 'low';\n        } else if (versionDiff.type === 'major') {\n            action = 'manual-review';\n            riskLevel = 'high';\n        }\n\n        // Override for security vulnerabilities\n        if (dependency.vulnerabilities && dependency.vulnerabilities.length > 0) {\n            const criticalVulns = dependency.vulnerabilities.filter(v => v.severity === 'critical');\n            if (criticalVulns.length > 0) {\n                action = 'auto-update';\n                riskLevel = 'critical';\n            }\n        }\n\n        return {\n            action,\n            targetVersion: latestVersion,\n            reasoning: this.generateRecommendationReasoning(dependency, versionDiff, updateResearch),\n            riskLevel,\n            migrationComplexity: versionDiff.type === 'major' ? 'complex' : 'simple',\n            context7Research: updateResearch || undefined\n        };\n    }\n\n    /**\n     * Get latest version for a dependency\n     */\n    private async getLatestVersion(dependency: DependencyInfo): Promise<string | undefined> {\n        // This would integrate with package registries\n        // For now, return a placeholder\n        return undefined;\n    }\n\n    /**\n     * Analyze version difference between current and target\n     */\n    private analyzeVersionDifference(current: string, target: string): {\n        type: 'patch' | 'minor' | 'major';\n        hasBreakingChanges: boolean;\n    } {\n        // Simplified semantic version analysis\n        // In a real implementation, this would use semver library\n        return {\n            type: 'minor',\n            hasBreakingChanges: false\n        };\n    }\n\n    /**\n     * Generate reasoning text for recommendation\n     */\n    private generateRecommendationReasoning(\n        dependency: DependencyInfo,\n        versionDiff: any,\n        research?: Context7ResearchResult | null\n    ): string {\n        let reasoning = `Update ${dependency.name} from ${dependency.currentVersion} to ${dependency.latestVersion}. `;\n        \n        if (research && research.response.success) {\n            reasoning += `Context7 research indicates: ${research.response.insights?.join(', ') || 'No specific concerns found'}.`;\n        }\n\n        return reasoning;\n    }\n\n    /**\n     * Extract vulnerabilities from Context7 research\n     */\n    private extractVulnerabilitiesFromResearch(research: Context7ResearchResult): VulnerabilityInfo[] {\n        // Extract vulnerability information from Context7 response\n        // This would parse the research data for vulnerability details\n        return [];\n    }\n\n    /**\n     * Calculate overall health score for dependencies\n     */\n    private calculateHealthScore(dependencies: DependencyInfo[], vulnerabilities: VulnerabilityInfo[]): number {\n        let score = 100;\n\n        // Deduct for vulnerabilities\n        const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical').length;\n        const highVulns = vulnerabilities.filter(v => v.severity === 'high').length;\n        const mediumVulns = vulnerabilities.filter(v => v.severity === 'medium').length;\n\n        score -= (criticalVulns * 20) + (highVulns * 10) + (mediumVulns * 5);\n\n        // Deduct for outdated packages\n        const outdated = dependencies.filter(d => d.latestVersion && d.currentVersion !== d.latestVersion).length;\n        score -= Math.min(30, outdated * 2);\n\n        return Math.max(0, score);\n    }\n\n    /**\n     * Prioritize recommendations by risk and impact\n     */\n    private prioritizeRecommendations(a: UpdateRecommendation, b: UpdateRecommendation): number {\n        const riskOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n        return riskOrder[a.riskLevel] - riskOrder[b.riskLevel];\n    }\n\n    /**\n     * Execute automatic update\n     */\n    private async executeAutomaticUpdate(recommendation: UpdateRecommendation): Promise<void> {\n        // Implementation would execute the actual update\n        console.log(`Dakota: Auto-updating to ${recommendation.targetVersion}`);\n    }\n\n    /**\n     * Present manual reviews to user\n     */\n    private async presentManualReviews(recommendations: UpdateRecommendation[]): Promise<void> {\n        // Implementation would show user interface for manual review\n        console.log(`Dakota: ${recommendations.length} updates require manual review`);\n    }\n\n\n\n    /**\n     * Generate comprehensive audit report\n     */\n    private async generateAuditReport(result: DependencyAuditResult): Promise<void> {\n        // Generate report using the template\n        const reportPath = path.join(result.projectPath, 'dependency-audit-report.md');\n        // Implementation would generate the actual report file\n        console.log(`Dakota: Audit report generated at ${reportPath}`);\n    }\n\n    /**\n     * Get Dakota agent status\n     */\n    getStatus(): {\n        isMonitoring: boolean;\n        context7Available: boolean;\n        monitoringStats: any;\n        lastAudit?: Date;\n    } {\n        const monitoringStatus = this.dependencyMonitor.getMonitoringStatus();\n        return {\n            isMonitoring: this.isMonitoring,\n            context7Available: this.context7.isIntegrationAvailable(),\n            monitoringStats: monitoringStatus.stats\n        };\n    }\n\n    /**\n     * Dispose of agent resources\n     */\n    dispose(): void {\n        this.stopDependencyMonitoring();\n        this.dependencyMonitor.dispose();\n        this.context7.dispose();\n    }\n}\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { \n    ProjectAnalysis, \n    ProjectType, \n    ComplexityLevel, \n    BMadMode, \n    AgentId, \n    WorkspaceAnalysisResult,\n    TechnologyStack,\n    AgentRecommendation\n} from '../types/BMadTypes';\n// ProjectTypeDetector will be implemented inline for now\n\nexport class WorkspaceAnalyzer {\n    constructor() {\n        // Initialize any required components\n    }\n\n    /**\n     * Perform comprehensive workspace analysis\n     */\n    async analyzeWorkspace(workspaceFolder?: vscode.WorkspaceFolder): Promise<WorkspaceAnalysisResult> {\n        const folder = workspaceFolder || vscode.workspace.workspaceFolders?.[0];\n        if (!folder) {\n            throw new Error('No workspace folder available for analysis');\n        }\n\n        try {\n            // Analyze project characteristics\n            const projectAnalysis = await this.analyzeProject(folder);\n            \n            // Check for existing BMAD setup\n            const existingBmadSetup = await this.checkExistingBmadSetup(folder);\n            \n            // Generate recommendations\n            const recommendations = await this.generateRecommendations(projectAnalysis);\n\n            return {\n                projectAnalysis,\n                existingBmadSetup: existingBmadSetup.exists,\n                bmadConfigPath: existingBmadSetup.configPath,\n                needsInitialization: !existingBmadSetup.exists,\n                recommendations\n            };\n        } catch (error) {\n            console.error('Workspace analysis failed:', error);\n            throw new Error(`Failed to analyze workspace: ${error}`);\n        }\n    }\n\n    /**\n     * Analyze project characteristics and technology stack\n     */\n    async analyzeProject(workspaceFolder: vscode.WorkspaceFolder): Promise<ProjectAnalysis> {\n        const projectPath = workspaceFolder.uri.fsPath;\n\n        // Read and analyze configuration files\n        const packageJson = await this.readPackageJson(projectPath);\n        const requirementsTxt = await this.readRequirementsTxt(projectPath);\n        const cargoToml = await this.readCargoToml(projectPath);\n        const pomXml = await this.readPomXml(projectPath);\n\n        // Detect project type and framework\n        const projectType = this.determineProjectType(\n            packageJson, requirementsTxt, cargoToml, pomXml\n        );\n\n        const framework = this.detectFramework(packageJson);\n        const language = this.detectLanguage(\n            packageJson, requirementsTxt, cargoToml, pomXml\n        );\n\n        // Analyze project characteristics\n        const hasDatabase = this.detectDatabase(packageJson, requirementsTxt);\n        const hasAuthentication = this.detectAuthentication(packageJson, requirementsTxt);\n        const hasFrontend = this.detectFrontend(packageJson);\n        const hasBackend = this.detectBackend(packageJson, requirementsTxt);\n        const hasDocker = await this.detectDocker(projectPath);\n        const hasKubernetes = await this.detectKubernetes(projectPath);\n        const hasTests = this.detectTests(packageJson, requirementsTxt);\n        const hasCICD = await this.detectCICD(projectPath);\n\n        // Calculate complexity\n        const complexity = this.calculateComplexity(packageJson, requirementsTxt, {\n            hasDatabase,\n            hasAuthentication,\n            hasFrontend,\n            hasBackend,\n            hasDocker,\n            hasKubernetes,\n            hasTests,\n            hasCICD\n        });\n\n        // Extract dependencies\n        const dependencies = this.extractDependencies(packageJson, requirementsTxt);\n        const devDependencies = this.extractDevDependencies(packageJson);\n\n        // Generate recommendations\n        const recommendedMode = this.recommendMode(projectType, complexity);\n        const recommendedAgents = this.recommendAgents(projectType, {\n            hasDatabase,\n            hasAuthentication,\n            hasFrontend,\n            hasBackend,\n            hasDocker,\n            hasKubernetes\n        });\n\n        // Calculate confidence score\n        const confidence = this.calculateConfidence(projectType, framework, language);\n\n        return {\n            type: projectType,\n            framework,\n            language,\n            complexity,\n            hasDatabase,\n            hasAuthentication,\n            hasFrontend,\n            hasBackend,\n            hasDocker,\n            hasKubernetes,\n            hasTests,\n            hasCICD,\n            dependencies,\n            devDependencies,\n            recommendedMode,\n            recommendedAgents,\n            confidence\n        };\n    }\n\n    /**\n     * Check for existing BMAD setup in workspace\n     */\n    private async checkExistingBmadSetup(workspaceFolder: vscode.WorkspaceFolder): Promise<{\n        exists: boolean;\n        configPath?: string;\n    }> {\n        const bmadPath = path.join(workspaceFolder.uri.fsPath, 'bmad-agent');\n        \n        try {\n            const bmadUri = vscode.Uri.file(bmadPath);\n            const stat = await vscode.workspace.fs.stat(bmadUri);\n            \n            if (stat.type === vscode.FileType.Directory) {\n                // Check for configuration file\n                const configPath = path.join(bmadPath, 'bmad-config.json');\n                try {\n                    await vscode.workspace.fs.stat(vscode.Uri.file(configPath));\n                    return { exists: true, configPath };\n                } catch {\n                    return { exists: true }; // Directory exists but no config\n                }\n            }\n        } catch {\n            // Directory doesn't exist\n        }\n\n        return { exists: false };\n    }\n\n    /**\n     * Generate intelligent recommendations based on project analysis\n     */\n    private async generateRecommendations(projectAnalysis: ProjectAnalysis): Promise<{\n        mode: BMadMode;\n        agents: AgentRecommendation[];\n        actions: string[];\n    }> {\n        const mode = projectAnalysis.recommendedMode;\n        const agents = await this.generateAgentRecommendations(projectAnalysis);\n        const actions = this.generateActionRecommendations(projectAnalysis);\n\n        return { mode, agents, actions };\n    }\n\n    /**\n     * Generate agent recommendations with reasoning\n     */\n    private async generateAgentRecommendations(analysis: ProjectAnalysis): Promise<AgentRecommendation[]> {\n        const recommendations: AgentRecommendation[] = [];\n\n        // Always recommend core agents\n        recommendations.push({\n            agent: { id: 'john', name: 'John', title: 'Product Manager', description: 'Product requirements and planning', persona: 'pm', tasks: [], specializations: ['requirements', 'planning'] },\n            reason: 'Essential for product requirements and project planning',\n            confidence: 1.0,\n            required: true\n        });\n\n        recommendations.push({\n            agent: { id: 'fred', name: 'Fred', title: 'Architect', description: 'System architecture and technical design', persona: 'architect', tasks: [], specializations: ['architecture', 'design'] },\n            reason: 'Required for technical architecture and system design',\n            confidence: 1.0,\n            required: true\n        });\n\n        // Conditional recommendations based on project characteristics\n        if (analysis.hasFrontend) {\n            recommendations.push({\n                agent: { id: 'jane', name: 'Jane', title: 'Design Architect', description: 'UI/UX and frontend architecture', persona: 'design-architect', tasks: [], specializations: ['frontend', 'ui-ux'] },\n                reason: 'Frontend components detected - UI/UX expertise needed',\n                confidence: 0.9,\n                required: false\n            });\n        }\n\n        if (analysis.hasAuthentication || analysis.hasDatabase) {\n            recommendations.push({\n                agent: { id: 'sage', name: 'Sage', title: 'Security Engineer', description: 'Security analysis and vulnerability assessment', persona: 'security-engineer', tasks: [], specializations: ['security', 'compliance'] },\n                reason: 'Authentication/database detected - security expertise recommended',\n                confidence: 0.8,\n                required: false\n            });\n        }\n\n        if (analysis.hasDocker || analysis.hasKubernetes) {\n            recommendations.push({\n                agent: { id: 'alex', name: 'Alex', title: 'Platform Engineer', description: 'Infrastructure and DevOps', persona: 'platform-engineer', tasks: [], specializations: ['infrastructure', 'devops'] },\n                reason: 'Containerization/orchestration detected - infrastructure expertise needed',\n                confidence: 0.85,\n                required: false\n            });\n        }\n\n        if (analysis.complexity === 'complex' || analysis.complexity === 'enterprise') {\n            recommendations.push({\n                agent: { id: 'tyler', name: 'Tyler', title: 'Task Breakdown Specialist', description: 'Task management and workflow organization', persona: 'task-breakdown-specialist', tasks: [], specializations: ['task-management', 'workflow'] },\n                reason: 'Complex project detected - task breakdown expertise recommended',\n                confidence: 0.75,\n                required: false\n            });\n        }\n\n        return recommendations;\n    }\n\n    /**\n     * Generate action recommendations\n     */\n    private generateActionRecommendations(analysis: ProjectAnalysis): string[] {\n        const actions: string[] = [];\n\n        if (analysis.confidence < 0.7) {\n            actions.push('Review project structure manually for better analysis');\n        }\n\n        if (!analysis.hasTests) {\n            actions.push('Consider adding testing framework');\n        }\n\n        if (!analysis.hasCICD) {\n            actions.push('Set up CI/CD pipeline for automated deployment');\n        }\n\n        if (analysis.hasAuthentication && !analysis.dependencies.some(dep => \n            dep.includes('security') || dep.includes('auth') || dep.includes('jwt'))) {\n            actions.push('Review security dependencies and authentication setup');\n        }\n\n        return actions;\n    }\n\n    // Helper methods for file reading using modern VS Code APIs\n    private async readPackageJson(projectPath: string): Promise<any> {\n        try {\n            const packagePath = path.join(projectPath, 'package.json');\n            const packageUri = vscode.Uri.file(packagePath);\n            const packageData = await vscode.workspace.fs.readFile(packageUri);\n            const content = new TextDecoder().decode(packageData);\n            return JSON.parse(content);\n        } catch {\n            return null;\n        }\n    }\n\n    private async readRequirementsTxt(projectPath: string): Promise<string[]> {\n        try {\n            const reqPath = path.join(projectPath, 'requirements.txt');\n            const reqUri = vscode.Uri.file(reqPath);\n            const reqData = await vscode.workspace.fs.readFile(reqUri);\n            const content = new TextDecoder().decode(reqData);\n            return content.split('\\n').filter(line => line.trim());\n        } catch {\n            return [];\n        }\n    }\n\n    private async readCargoToml(projectPath: string): Promise<any> {\n        try {\n            const cargoPath = path.join(projectPath, 'Cargo.toml');\n            const cargoUri = vscode.Uri.file(cargoPath);\n            const cargoData = await vscode.workspace.fs.readFile(cargoUri);\n            const content = new TextDecoder().decode(cargoData);\n            // Simple TOML parsing - in production, use a proper TOML parser\n            return { exists: true, content };\n        } catch {\n            return null;\n        }\n    }\n\n    private async readPomXml(projectPath: string): Promise<any> {\n        try {\n            const pomPath = path.join(projectPath, 'pom.xml');\n            const pomUri = vscode.Uri.file(pomPath);\n            const pomData = await vscode.workspace.fs.readFile(pomUri);\n            const content = new TextDecoder().decode(pomData);\n            return { exists: true, content };\n        } catch {\n            return null;\n        }\n    }\n\n    // Detection methods\n    private detectDatabase(packageJson: any, requirements: string[]): boolean {\n        if (packageJson) {\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n            const dbLibs = ['mongoose', 'sequelize', 'typeorm', 'prisma', 'pg', 'mysql', 'sqlite3'];\n            return dbLibs.some(lib => deps[lib]);\n        }\n        \n        return requirements.some(req => \n            req.includes('django') || req.includes('sqlalchemy') || req.includes('psycopg2')\n        );\n    }\n\n    private detectAuthentication(packageJson: any, requirements: string[]): boolean {\n        if (packageJson) {\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n            const authLibs = ['passport', 'jsonwebtoken', 'bcrypt', 'auth0', 'firebase-auth'];\n            return authLibs.some(lib => deps[lib]);\n        }\n        \n        return requirements.some(req => \n            req.includes('django-auth') || req.includes('flask-login') || req.includes('jwt')\n        );\n    }\n\n    private detectFrontend(packageJson: any): boolean {\n        if (!packageJson) return false;\n        \n        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n        const frontendLibs = ['react', 'vue', 'angular', '@angular/core', 'svelte'];\n        return frontendLibs.some(lib => deps[lib]);\n    }\n\n    private detectBackend(packageJson: any, requirements: string[]): boolean {\n        if (packageJson) {\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n            const backendLibs = ['express', 'fastify', '@nestjs/core', 'koa'];\n            if (backendLibs.some(lib => deps[lib])) return true;\n        }\n        \n        return requirements.some(req => \n            req.includes('django') || req.includes('flask') || req.includes('fastapi')\n        );\n    }\n\n    private async detectDocker(projectPath: string): Promise<boolean> {\n        try {\n            const dockerPath = path.join(projectPath, 'Dockerfile');\n            await vscode.workspace.fs.stat(vscode.Uri.file(dockerPath));\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    private async detectKubernetes(projectPath: string): Promise<boolean> {\n        try {\n            const k8sPath = path.join(projectPath, 'k8s');\n            await vscode.workspace.fs.stat(vscode.Uri.file(k8sPath));\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    private detectTests(packageJson: any, requirements: string[]): boolean {\n        if (packageJson) {\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n            const testLibs = ['jest', 'mocha', 'chai', 'cypress', 'playwright', '@testing-library'];\n            if (testLibs.some(lib => deps[lib] || Object.keys(deps).some(key => key.includes(lib)))) {\n                return true;\n            }\n        }\n        \n        return requirements.some(req => \n            req.includes('pytest') || req.includes('unittest') || req.includes('nose')\n        );\n    }\n\n    private async detectCICD(projectPath: string): Promise<boolean> {\n        const cicdPaths = [\n            '.github/workflows',\n            '.gitlab-ci.yml',\n            'azure-pipelines.yml',\n            'Jenkinsfile'\n        ];\n\n        for (const ciPath of cicdPaths) {\n            try {\n                const fullPath = path.join(projectPath, ciPath);\n                await vscode.workspace.fs.stat(vscode.Uri.file(fullPath));\n                return true;\n            } catch {\n                // Continue checking other paths\n            }\n        }\n\n        return false;\n    }\n\n    private calculateComplexity(packageJson: any, requirements: string[], features: any): ComplexityLevel {\n        let score = 0;\n\n        // Base complexity from dependencies\n        if (packageJson) {\n            const totalDeps = Object.keys(packageJson.dependencies || {}).length + \n                            Object.keys(packageJson.devDependencies || {}).length;\n            score += Math.min(totalDeps / 10, 3);\n        }\n\n        score += requirements.length / 5;\n\n        // Feature complexity\n        if (features.hasDatabase) score += 1;\n        if (features.hasAuthentication) score += 1;\n        if (features.hasFrontend && features.hasBackend) score += 2;\n        if (features.hasDocker) score += 1;\n        if (features.hasKubernetes) score += 2;\n        if (features.hasTests) score += 0.5;\n        if (features.hasCICD) score += 1;\n\n        if (score < 2) return 'simple';\n        if (score < 5) return 'moderate';\n        if (score < 8) return 'complex';\n        return 'enterprise';\n    }\n\n    private extractDependencies(packageJson: any, requirements: string[]): string[] {\n        const deps: string[] = [];\n        \n        if (packageJson?.dependencies) {\n            deps.push(...Object.keys(packageJson.dependencies));\n        }\n        \n        deps.push(...requirements.map(req => req.split('==')[0].split('>=')[0].trim()));\n        \n        return deps;\n    }\n\n    private extractDevDependencies(packageJson: any): string[] {\n        return packageJson?.devDependencies ? Object.keys(packageJson.devDependencies) : [];\n    }\n\n    private recommendMode(projectType: ProjectType, complexity: ComplexityLevel): BMadMode {\n        // Default to documentation mode for most projects\n        if (complexity === 'simple' || complexity === 'moderate') {\n            return 'documentation';\n        }\n        \n        // Complex projects might benefit from full development mode\n        if (complexity === 'complex' || complexity === 'enterprise') {\n            return 'fullDevelopment';\n        }\n        \n        return 'documentation';\n    }\n\n    private recommendAgents(projectType: ProjectType, features: any): AgentId[] {\n        const agents: AgentId[] = ['john', 'fred']; // Always include PM and Architect\n        \n        if (features.hasFrontend) agents.push('jane');\n        if (features.hasAuthentication || features.hasDatabase) agents.push('sage');\n        if (features.hasDocker || features.hasKubernetes) agents.push('alex');\n        \n        return agents;\n    }\n\n    private calculateConfidence(projectType: ProjectType, framework: string, language: string): number {\n        let confidence = 0.5; // Base confidence\n\n        if (projectType !== 'unknown') confidence += 0.3;\n        if (framework !== 'Unknown') confidence += 0.2;\n        if (language !== 'Unknown') confidence += 0.1;\n\n        return Math.min(confidence, 1.0);\n    }\n\n    // Project Type Detection Methods\n    private determineProjectType(packageJson: any, requirements: string[], cargoToml: any, pomXml: any): ProjectType {\n        // JavaScript/TypeScript projects\n        if (packageJson) {\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n\n            // React projects\n            if (deps.react) {\n                return deps.express || deps.fastify || deps['@nestjs/core'] ? 'fullstack-web' : 'react-frontend';\n            }\n\n            // Vue projects\n            if (deps.vue) {\n                return 'vue-frontend';\n            }\n\n            // Angular projects\n            if (deps['@angular/core']) {\n                return 'angular-frontend';\n            }\n\n            // Node.js API projects\n            if (deps.express || deps.fastify || deps['@nestjs/core']) {\n                return 'nodejs-api';\n            }\n\n            // Mobile apps\n            if (deps['react-native'] || deps['@react-native-community/cli']) {\n                return 'mobile-app';\n            }\n\n            // Desktop apps\n            if (deps.electron || deps['@tauri-apps/api']) {\n                return 'desktop-app';\n            }\n        }\n\n        // Python projects\n        if (requirements.length > 0) {\n            const reqString = requirements.join(' ').toLowerCase();\n\n            if (reqString.includes('django') || reqString.includes('flask') || reqString.includes('fastapi')) {\n                return 'python-api';\n            }\n        }\n\n        // Rust projects\n        if (cargoToml) {\n            return 'rust-api';\n        }\n\n        // Java projects\n        if (pomXml) {\n            return 'nodejs-api'; // Simplified for now\n        }\n\n        return 'unknown';\n    }\n\n    private detectFramework(packageJson: any): string {\n        if (!packageJson) return 'Unknown';\n\n        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n\n        if (deps.react) return 'React';\n        if (deps.vue) return 'Vue';\n        if (deps['@angular/core']) return 'Angular';\n        if (deps.svelte) return 'Svelte';\n        if (deps.express) return 'Express';\n        if (deps.fastify) return 'Fastify';\n        if (deps['@nestjs/core']) return 'NestJS';\n        if (deps['react-native']) return 'React Native';\n        if (deps.electron) return 'Electron';\n\n        return 'Unknown';\n    }\n\n    private detectLanguage(packageJson: any, requirements: string[], cargoToml: any, pomXml: any): string {\n        if (packageJson) {\n            // Check for TypeScript\n            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n            if (deps.typescript || deps['@types/node']) {\n                return 'TypeScript';\n            }\n            return 'JavaScript';\n        }\n\n        if (requirements.length > 0) {\n            return 'Python';\n        }\n\n        if (cargoToml) {\n            return 'Rust';\n        }\n\n        if (pomXml) {\n            return 'Java';\n        }\n\n        return 'Unknown';\n    }\n}\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { BMadMode, AgentId, WorkflowProgress, ProjectIssue, StatusBarInfo } from '../types/BMadTypes';\n\nexport class StatusBarManager {\n    private statusBarItem: vscode.StatusBarItem;\n    private progressItem: vscode.StatusBarItem;\n    private issueItem: vscode.StatusBarItem;\n    private currentInfo: StatusBarInfo;\n\n    constructor() {\n        // Create status bar items\n        this.statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Left, 100\n        );\n        this.progressItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Left, 99\n        );\n        this.issueItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Left, 98\n        );\n\n        // Initialize current info\n        this.currentInfo = {\n            activeAgents: [],\n            lastUpdate: new Date()\n        };\n    }\n\n    /**\n     * Initialize status bar with default state\n     */\n    initialize(): void {\n        this.statusBarItem.text = '$(robot) BMAD: Ready';\n        this.statusBarItem.tooltip = 'BMAD AI Agent Orchestrator - Click to select mode';\n        this.statusBarItem.command = 'bmad.quickModeSelect';\n        this.statusBarItem.show();\n\n        console.log('BMAD Status Bar initialized');\n    }\n\n    /**\n     * Update status bar with current mode and agents\n     */\n    updateMode(mode: BMadMode, agents: AgentId[] = []): void {\n        this.currentInfo.mode = mode;\n        this.currentInfo.activeAgents = agents;\n        this.currentInfo.lastUpdate = new Date();\n\n        const modeDisplayName = this.getModeDisplayName(mode);\n        const agentNames = agents.map(id => this.getAgentDisplayName(id)).join(', ');\n\n        this.statusBarItem.text = `$(robot) BMAD: ${modeDisplayName}`;\n        this.statusBarItem.tooltip = this.buildModeTooltip(mode, agents);\n        this.statusBarItem.command = 'bmad.showModeDetails';\n        this.statusBarItem.backgroundColor = undefined; // Clear any error background\n        this.statusBarItem.show();\n\n        // Show notification if enabled\n        const config = vscode.workspace.getConfiguration('bmad');\n        if (config.get('progressNotifications', true)) {\n            vscode.window.showInformationMessage(\n                `BMAD ${modeDisplayName} mode activated${agents.length > 0 ? ` with agents: ${agentNames}` : ''}`\n            );\n        }\n    }\n\n    /**\n     * Update progress information\n     */\n    updateProgress(progress: WorkflowProgress): void {\n        this.currentInfo.progress = progress;\n        this.currentInfo.lastUpdate = new Date();\n\n        if (progress.progress > 0 && progress.progress < 100) {\n            this.progressItem.text = `$(sync~spin) ${progress.phase} (${progress.progress}%)`;\n            this.progressItem.tooltip = this.buildProgressTooltip(progress);\n            this.progressItem.command = 'bmad.showProgress';\n            this.progressItem.show();\n        } else if (progress.progress >= 100) {\n            this.progressItem.text = `$(check) ${progress.phase} Complete`;\n            this.progressItem.tooltip = 'Workflow completed successfully';\n            this.progressItem.command = 'bmad.showProgress';\n            \n            // Hide progress item after 5 seconds\n            setTimeout(() => {\n                this.progressItem.hide();\n            }, 5000);\n        } else {\n            this.progressItem.hide();\n        }\n    }\n\n    /**\n     * Update issue information\n     */\n    updateIssues(issues: ProjectIssue[]): void {\n        this.currentInfo.issues = issues;\n        this.currentInfo.lastUpdate = new Date();\n\n        if (issues.length === 0) {\n            this.issueItem.hide();\n            return;\n        }\n\n        const criticalIssues = issues.filter(issue => issue.severity === 'critical');\n        const highIssues = issues.filter(issue => issue.severity === 'high');\n\n        if (criticalIssues.length > 0) {\n            this.issueItem.text = `$(error) ${criticalIssues.length} Critical`;\n            this.issueItem.tooltip = this.buildIssueTooltip(issues);\n            this.issueItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n        } else if (highIssues.length > 0) {\n            this.issueItem.text = `$(warning) ${highIssues.length} High`;\n            this.issueItem.tooltip = this.buildIssueTooltip(issues);\n            this.issueItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n        } else {\n            this.issueItem.text = `$(info) ${issues.length} Issues`;\n            this.issueItem.tooltip = this.buildIssueTooltip(issues);\n            this.issueItem.backgroundColor = undefined;\n        }\n\n        this.issueItem.command = 'bmad.debugMode';\n        this.issueItem.show();\n    }\n\n    /**\n     * Show error state\n     */\n    showError(message: string, command?: string): void {\n        this.statusBarItem.text = '$(error) BMAD: Error';\n        this.statusBarItem.tooltip = `Error: ${message}\\nClick for details`;\n        this.statusBarItem.command = command || 'bmad.showErrorDetails';\n        this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n        this.statusBarItem.show();\n\n        // Show error notification\n        vscode.window.showErrorMessage(`BMAD Error: ${message}`, 'Show Details').then(action => {\n            if (action === 'Show Details' && command) {\n                vscode.commands.executeCommand(command);\n            }\n        });\n    }\n\n    /**\n     * Show loading state\n     */\n    showLoading(message: string): void {\n        this.statusBarItem.text = `$(sync~spin) BMAD: ${message}`;\n        this.statusBarItem.tooltip = `BMAD is ${message.toLowerCase()}...`;\n        this.statusBarItem.command = undefined;\n        this.statusBarItem.backgroundColor = undefined;\n        this.statusBarItem.show();\n    }\n\n    /**\n     * Show success state\n     */\n    showSuccess(message: string, command?: string): void {\n        this.statusBarItem.text = '$(check) BMAD: Success';\n        this.statusBarItem.tooltip = `Success: ${message}\\nClick for details`;\n        this.statusBarItem.command = command || 'bmad.quickModeSelect';\n        this.statusBarItem.backgroundColor = undefined;\n        this.statusBarItem.show();\n\n        // Show success notification\n        vscode.window.showInformationMessage(`BMAD: ${message}`);\n\n        // Auto-clear success state after 5 seconds\n        setTimeout(() => {\n            this.statusBarItem.text = '$(robot) BMAD: Ready';\n            this.statusBarItem.tooltip = 'BMAD AI Agent Orchestrator - Click to select mode';\n            this.statusBarItem.command = 'bmad.quickModeSelect';\n        }, 5000);\n    }\n\n    /**\n     * Show info state\n     */\n    showInfo(message: string, command?: string): void {\n        this.statusBarItem.text = '$(info) BMAD: Info';\n        this.statusBarItem.tooltip = `Info: ${message}\\nClick for details`;\n        this.statusBarItem.command = command || 'bmad.quickModeSelect';\n        this.statusBarItem.backgroundColor = undefined;\n        this.statusBarItem.show();\n\n        // Show info notification\n        vscode.window.showInformationMessage(`BMAD: ${message}`);\n\n        // Auto-clear info state after 3 seconds\n        setTimeout(() => {\n            this.statusBarItem.text = '$(robot) BMAD: Ready';\n            this.statusBarItem.tooltip = 'BMAD AI Agent Orchestrator - Click to select mode';\n            this.statusBarItem.command = 'bmad.quickModeSelect';\n        }, 3000);\n    }\n\n    /**\n     * Clear all status items\n     */\n    clear(): void {\n        this.statusBarItem.hide();\n        this.progressItem.hide();\n        this.issueItem.hide();\n    }\n\n    /**\n     * Get current status information\n     */\n    getCurrentInfo(): StatusBarInfo {\n        return { ...this.currentInfo };\n    }\n\n    /**\n     * Dispose of status bar items\n     */\n    dispose(): void {\n        this.statusBarItem.dispose();\n        this.progressItem.dispose();\n        this.issueItem.dispose();\n    }\n\n    // Helper methods\n    private getModeDisplayName(mode: BMadMode): string {\n        const modeNames: Record<BMadMode, string> = {\n            documentation: 'Documentation',\n            fullDevelopment: 'Full Development',\n            continueProject: 'Continue Project',\n            taskOverview: 'Task Overview',\n            debugMode: 'Debug & Troubleshoot',\n            continuousExecution: 'Continuous Execution',\n            featureGapAnalysis: 'Feature Gap Analysis',\n            githubIntegration: 'GitHub Integration'\n        };\n        return modeNames[mode] || mode;\n    }\n\n    private getAgentDisplayName(agentId: AgentId): string {\n        const agentNames: Record<AgentId, string> = {\n            john: 'John (PM)',\n            fred: 'Fred (Architect)',\n            jane: 'Jane (Design)',\n            sage: 'Sage (Security)',\n            alex: 'Alex (Platform)',\n            tyler: 'Tyler (Tasks)',\n            taylor: 'Taylor (Writer)',\n            sarah: 'Sarah (PO)',\n            bob: 'Bob (SM)',\n            dakota: 'Dakota (Dependencies)'\n        };\n        return agentNames[agentId] || agentId;\n    }\n\n    private buildModeTooltip(mode: BMadMode, agents: AgentId[]): string {\n        const modeDescription = this.getModeDescription(mode);\n        const agentList = agents.length > 0 \n            ? `\\n\\nActive Agents:\\n${agents.map(id => `• ${this.getAgentDisplayName(id)}`).join('\\n')}`\n            : '';\n        \n        return `BMAD AI Agent Orchestrator\\n\\nMode: ${this.getModeDisplayName(mode)}\\n${modeDescription}${agentList}\\n\\nClick to view mode details`;\n    }\n\n    private buildProgressTooltip(progress: WorkflowProgress): string {\n        const timeRemaining = progress.estimatedTimeRemaining \n            ? `\\nEstimated time remaining: ${Math.round(progress.estimatedTimeRemaining / 60)} minutes`\n            : '';\n        \n        const currentAgent = progress.currentAgent \n            ? `\\nCurrent agent: ${this.getAgentDisplayName(progress.currentAgent)}`\n            : '';\n\n        const completedTasks = progress.completedTasks.length > 0\n            ? `\\n\\nCompleted tasks:\\n${progress.completedTasks.map(task => `• ${task}`).join('\\n')}`\n            : '';\n\n        return `BMAD Workflow Progress\\n\\nPhase: ${progress.phase}\\nProgress: ${progress.progress}%${timeRemaining}${currentAgent}${completedTasks}\\n\\nClick for detailed progress view`;\n    }\n\n    private buildIssueTooltip(issues: ProjectIssue[]): string {\n        const issueSummary = issues.reduce((acc, issue) => {\n            acc[issue.severity] = (acc[issue.severity] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n\n        const summaryText = Object.entries(issueSummary)\n            .map(([severity, count]) => `${count} ${severity}`)\n            .join(', ');\n\n        const recentIssues = issues.slice(0, 3).map(issue => \n            `• ${issue.severity.toUpperCase()}: ${issue.message}`\n        ).join('\\n');\n\n        return `Project Issues Detected\\n\\nSummary: ${summaryText}\\n\\nRecent issues:\\n${recentIssues}\\n\\nClick to activate Debug & Troubleshoot mode`;\n    }\n\n    private getModeDescription(mode: BMadMode): string {\n        const descriptions: Record<BMadMode, string> = {\n            documentation: 'Generate comprehensive project documentation',\n            fullDevelopment: 'Complete application development workflow',\n            continueProject: 'Resume interrupted project work',\n            taskOverview: 'Project status dashboard and task management',\n            debugMode: 'Systematic issue diagnosis and resolution',\n            continuousExecution: 'Autonomous workflow execution',\n            featureGapAnalysis: 'Analyze missing features and improvements',\n            githubIntegration: 'GitHub repository documentation and workflow'\n        };\n        return descriptions[mode] || 'BMAD workflow mode';\n    }\n}\n","import * as vscode from 'vscode';\nimport { BMadOrchestrator } from '../orchestrator/BMadOrchestrator';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { StatusBarManager } from '../ui/StatusBarManager';\nimport { BMadMode, AgentId, BMadQuickPickItem, CommandResult } from '../types/BMadTypes';\nimport { DakotaAgent } from '../agents/DakotaAgent';\n\nexport class CommandManager {\n    private orchestrator: BMadOrchestrator;\n    private analyzer: WorkspaceAnalyzer;\n    private statusBar: StatusBarManager;\n    private dakotaAgent: DakotaAgent;\n\n    constructor(\n        orchestrator: BMadOrchestrator,\n        analyzer: WorkspaceAnalyzer,\n        statusBar: StatusBarManager\n    ) {\n        this.orchestrator = orchestrator;\n        this.analyzer = analyzer;\n        this.statusBar = statusBar;\n        this.dakotaAgent = new DakotaAgent(analyzer, statusBar);\n    }\n\n    /**\n     * Register all BMAD commands with VS Code\n     */\n    async registerCommands(context: vscode.ExtensionContext): Promise<void> {\n        const commands = [\n            // Mode activation commands\n            vscode.commands.registerCommand('bmad.activateDocumentationMode', \n                () => this.activateMode('documentation')),\n            vscode.commands.registerCommand('bmad.activateFullDevelopmentMode', \n                () => this.activateMode('fullDevelopment')),\n            vscode.commands.registerCommand('bmad.continueProject', \n                () => this.activateMode('continueProject')),\n            vscode.commands.registerCommand('bmad.taskOverview', \n                () => this.activateMode('taskOverview')),\n            vscode.commands.registerCommand('bmad.debugMode', \n                () => this.activateMode('debugMode')),\n            vscode.commands.registerCommand('bmad.continuousExecution', \n                () => this.activateMode('continuousExecution')),\n            vscode.commands.registerCommand('bmad.featureGapAnalysis', \n                () => this.activateMode('featureGapAnalysis')),\n            vscode.commands.registerCommand('bmad.githubIntegration', \n                () => this.activateMode('githubIntegration')),\n\n            // Quick mode selection\n            vscode.commands.registerCommand('bmad.quickModeSelect', \n                () => this.showQuickModeSelector()),\n\n            // Workspace analysis commands\n            vscode.commands.registerCommand('bmad.scanWorkspace', \n                () => this.scanWorkspace()),\n            vscode.commands.registerCommand('bmad.autoSetup', \n                () => this.autoSetup()),\n            vscode.commands.registerCommand('bmad.detectStack', \n                () => this.detectTechStack()),\n\n            // Agent management commands\n            vscode.commands.registerCommand('bmad.selectAgents', \n                () => this.showAgentSelector()),\n            vscode.commands.registerCommand('bmad.agentHandoff', \n                () => this.performAgentHandoff()),\n\n            // Utility commands\n            vscode.commands.registerCommand('bmad.healthCheck', \n                () => this.performHealthCheck()),\n            vscode.commands.registerCommand('bmad.showProgress', \n                () => this.showProgressDetails()),\n            vscode.commands.registerCommand('bmad.showModeDetails', \n                () => this.showModeDetails()),\n            vscode.commands.registerCommand('bmad.showErrorDetails', \n                () => this.showErrorDetails()),\n\n            // Augment integration commands\n            vscode.commands.registerCommand('bmad.debugCurrentFile',\n                () => this.debugCurrentFile()),\n            vscode.commands.registerCommand('bmad.documentCurrentFile',\n                () => this.documentCurrentFile()),\n            vscode.commands.registerCommand('bmad.debugSelection',\n                () => this.debugSelection()),\n            vscode.commands.registerCommand('bmad.explainCode',\n                () => this.explainCode()),\n            vscode.commands.registerCommand('bmad.generateTests',\n                () => this.generateTests()),\n            vscode.commands.registerCommand('bmad.analyzeFolder',\n                () => this.analyzeFolder()),\n            vscode.commands.registerCommand('bmad.generateDocsForFolder',\n                () => this.generateDocsForFolder()),\n            vscode.commands.registerCommand('bmad.refreshAnalysis',\n                () => this.refreshAnalysis()),\n            vscode.commands.registerCommand('bmad.openSettings',\n                () => this.openSettings()),\n            vscode.commands.registerCommand('bmad.showHelp',\n                () => this.showHelp()),\n\n            // Dakota (Dependency Modernization) commands\n            vscode.commands.registerCommand('bmad.dependencyAudit',\n                () => this.performDependencyAudit()),\n            vscode.commands.registerCommand('bmad.dependencyModernization',\n                () => this.performDependencyModernization()),\n            vscode.commands.registerCommand('bmad.startDependencyMonitoring',\n                () => this.startDependencyMonitoring()),\n            vscode.commands.registerCommand('bmad.stopDependencyMonitoring',\n                () => this.stopDependencyMonitoring()),\n            vscode.commands.registerCommand('bmad.checkSecurityVulnerabilities',\n                () => this.checkSecurityVulnerabilities()),\n            vscode.commands.registerCommand('bmad.updateOutdatedDependencies',\n                () => this.updateOutdatedDependencies()),\n            vscode.commands.registerCommand('bmad.generateDependencyReport',\n                () => this.generateDependencyReport()),\n            vscode.commands.registerCommand('bmad.analyzeDependencyLicenses',\n                () => this.analyzeDependencyLicenses()),\n\n            // Internal commands\n            vscode.commands.registerCommand('bmad.internal.configurationChanged',\n                (config) => this.onConfigurationChanged(config))\n        ];\n\n        context.subscriptions.push(...commands);\n        console.log('BMAD commands registered successfully');\n    }\n\n    /**\n     * Activate a specific BMAD mode\n     */\n    private async activateMode(mode: BMadMode): Promise<void> {\n        try {\n            this.statusBar.showLoading(`Activating ${mode} mode`);\n\n            // Analyze workspace to get recommendations\n            const analysis = await this.analyzer.analyzeWorkspace();\n            \n            // Update status bar with mode and recommended agents\n            this.statusBar.updateMode(mode, analysis.projectAnalysis.recommendedAgents);\n\n            // Show mode activation notification\n            const modeDisplayName = this.getModeDisplayName(mode);\n            const agentNames = analysis.projectAnalysis.recommendedAgents\n                .map(id => this.getAgentDisplayName(id))\n                .join(', ');\n\n            const message = `BMAD ${modeDisplayName} mode activated${agentNames ? ` with agents: ${agentNames}` : ''}`;\n            \n            const action = await vscode.window.showInformationMessage(\n                message,\n                'Start Workflow',\n                'Select Different Agents',\n                'OK'\n            );\n\n            if (action === 'Start Workflow') {\n                await this.orchestrator.executeMode(mode, analysis.projectAnalysis);\n            } else if (action === 'Select Different Agents') {\n                await this.showAgentSelector();\n            }\n\n        } catch (error) {\n            console.error(`Failed to activate ${mode} mode:`, error);\n            this.statusBar.showError(`Failed to activate ${mode} mode: ${error}`);\n        }\n    }\n\n    /**\n     * Show quick mode selection picker\n     */\n    private async showQuickModeSelector(): Promise<void> {\n        const modes: BMadQuickPickItem[] = [\n            {\n                id: 'documentation',\n                label: '$(book) Documentation Mode',\n                description: 'Generate 3 complete handoff documents',\n                detail: 'Perfect for sending specifications to developers'\n            },\n            {\n                id: 'fullDevelopment',\n                label: '$(rocket) Full Development Mode',\n                description: 'Complete application development',\n                detail: 'Build the entire project within this session'\n            },\n            {\n                id: 'continueProject',\n                label: '$(debug-continue) Continue Existing Project',\n                description: 'Resume interrupted project work',\n                detail: 'Full context restoration and intelligent continuation'\n            },\n            {\n                id: 'taskOverview',\n                label: '$(list-tree) Task List Overview',\n                description: 'Project status dashboard',\n                detail: 'Comprehensive task management and progress tracking'\n            },\n            {\n                id: 'debugMode',\n                label: '$(debug) Debug & Troubleshoot',\n                description: 'Systematic issue diagnosis',\n                detail: 'Identify and resolve project issues'\n            },\n            {\n                id: 'continuousExecution',\n                label: '$(play) Continuous Execution',\n                description: 'Autonomous workflow execution',\n                detail: 'Uninterrupted workflow progression'\n            },\n            {\n                id: 'featureGapAnalysis',\n                label: '$(search) Feature Gap Analysis',\n                description: 'Analyze missing features',\n                detail: 'Comprehensive improvement recommendations'\n            },\n            {\n                id: 'githubIntegration',\n                label: '$(github) GitHub Integration',\n                description: 'Repository documentation',\n                detail: 'Professional GitHub workflow management'\n            }\n        ];\n\n        const selected = await vscode.window.showQuickPick(modes, {\n            title: 'Select BMAD Mode',\n            placeHolder: 'Choose a workflow mode to activate',\n            matchOnDescription: true,\n            matchOnDetail: true\n        });\n\n        if (selected) {\n            await this.activateMode(selected.id as BMadMode);\n        }\n    }\n\n    /**\n     * Scan workspace and show analysis results\n     */\n    private async scanWorkspace(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Scanning workspace');\n\n            const analysis = await this.analyzer.analyzeWorkspace();\n            \n            // Show analysis results\n            const message = this.buildAnalysisMessage(analysis);\n            \n            const action = await vscode.window.showInformationMessage(\n                message,\n                'Activate Recommended Mode',\n                'Select Agents',\n                'View Details'\n            );\n\n            if (action === 'Activate Recommended Mode') {\n                await this.activateMode(analysis.recommendations.mode);\n            } else if (action === 'Select Agents') {\n                await this.showAgentSelector();\n            } else if (action === 'View Details') {\n                await this.showAnalysisDetails(analysis);\n            }\n\n            this.statusBar.initialize();\n\n        } catch (error) {\n            console.error('Workspace scan failed:', error);\n            this.statusBar.showError(`Workspace scan failed: ${error}`);\n        }\n    }\n\n    /**\n     * Auto-setup BMAD for current workspace\n     */\n    private async autoSetup(): Promise<void> {\n        try {\n            if (!vscode.workspace.workspaceFolders) {\n                vscode.window.showErrorMessage('No workspace folder open');\n                return;\n            }\n\n            this.statusBar.showLoading('Setting up BMAD');\n\n            const workspaceFolder = vscode.workspace.workspaceFolders[0];\n            await this.orchestrator.initializeWorkspace(workspaceFolder);\n\n            this.statusBar.initialize();\n\n        } catch (error) {\n            console.error('Auto-setup failed:', error);\n            this.statusBar.showError(`Auto-setup failed: ${error}`);\n        }\n    }\n\n    /**\n     * Detect and display technology stack\n     */\n    private async detectTechStack(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Detecting technology stack');\n\n            const analysis = await this.analyzer.analyzeWorkspace();\n            const project = analysis.projectAnalysis;\n\n            const stackInfo = [\n                `**Project Type:** ${project.type}`,\n                `**Framework:** ${project.framework}`,\n                `**Language:** ${project.language}`,\n                `**Complexity:** ${project.complexity}`,\n                '',\n                '**Features:**',\n                `- Frontend: ${project.hasFrontend ? '✅' : '❌'}`,\n                `- Backend: ${project.hasBackend ? '✅' : '❌'}`,\n                `- Database: ${project.hasDatabase ? '✅' : '❌'}`,\n                `- Authentication: ${project.hasAuthentication ? '✅' : '❌'}`,\n                `- Docker: ${project.hasDocker ? '✅' : '❌'}`,\n                `- Tests: ${project.hasTests ? '✅' : '❌'}`,\n                '',\n                `**Confidence:** ${Math.round(project.confidence * 100)}%`\n            ].join('\\n');\n\n            await vscode.window.showInformationMessage(\n                'Technology Stack Detection Complete',\n                { modal: true, detail: stackInfo },\n                'OK'\n            );\n\n            this.statusBar.initialize();\n\n        } catch (error) {\n            console.error('Tech stack detection failed:', error);\n            this.statusBar.showError(`Tech stack detection failed: ${error}`);\n        }\n    }\n\n    /**\n     * Show agent selection interface\n     */\n    private async showAgentSelector(): Promise<void> {\n        try {\n            const analysis = await this.analyzer.analyzeWorkspace();\n            const availableAgents = this.getAvailableAgents();\n\n            const agentItems: BMadQuickPickItem[] = availableAgents.map(agent => ({\n                id: agent.id,\n                label: `${agent.icon} ${agent.name}`,\n                description: agent.title,\n                detail: agent.description,\n                picked: analysis.projectAnalysis.recommendedAgents.includes(agent.id as AgentId)\n            }));\n\n            const selected = await vscode.window.showQuickPick(agentItems, {\n                title: 'Select BMAD AI Agents',\n                placeHolder: 'Choose agents for your project (recommended agents are pre-selected)',\n                canPickMany: true,\n                matchOnDescription: true,\n                matchOnDetail: true\n            });\n\n            if (selected && selected.length > 0) {\n                const selectedAgents = selected.map(item => item.id as AgentId);\n                await this.orchestrator.activateAgents(selectedAgents);\n                \n                vscode.window.showInformationMessage(\n                    `Activated agents: ${selected.map(item => item.label).join(', ')}`\n                );\n            }\n\n        } catch (error) {\n            console.error('Agent selection failed:', error);\n            vscode.window.showErrorMessage(`Agent selection failed: ${error}`);\n        }\n    }\n\n    /**\n     * Perform agent handoff\n     */\n    private async performAgentHandoff(): Promise<void> {\n        // Implementation for agent handoff\n        vscode.window.showInformationMessage('Agent handoff functionality coming soon!');\n    }\n\n    /**\n     * Perform project health check\n     */\n    private async performHealthCheck(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Performing health check');\n\n            // Get diagnostics from VS Code\n            const diagnostics = vscode.languages.getDiagnostics();\n            const issues = this.processDiagnostics(diagnostics);\n\n            if (issues.length === 0) {\n                vscode.window.showInformationMessage('✅ Project health check passed - no issues detected');\n            } else {\n                this.statusBar.updateIssues(issues);\n                \n                const action = await vscode.window.showWarningMessage(\n                    `Health check found ${issues.length} issues`,\n                    'Activate Debug Mode',\n                    'View Issues',\n                    'Ignore'\n                );\n\n                if (action === 'Activate Debug Mode') {\n                    await this.activateMode('debugMode');\n                } else if (action === 'View Issues') {\n                    await vscode.commands.executeCommand('workbench.actions.view.problems');\n                }\n            }\n\n            this.statusBar.initialize();\n\n        } catch (error) {\n            console.error('Health check failed:', error);\n            this.statusBar.showError(`Health check failed: ${error}`);\n        }\n    }\n\n    /**\n     * Show detailed progress information\n     */\n    private async showProgressDetails(): Promise<void> {\n        const statusInfo = this.statusBar.getCurrentInfo();\n        \n        if (statusInfo.progress) {\n            const progress = statusInfo.progress;\n            const details = [\n                `**Mode:** ${progress.mode}`,\n                `**Phase:** ${progress.phase}`,\n                `**Progress:** ${progress.progress}%`,\n                progress.currentAgent ? `**Current Agent:** ${this.getAgentDisplayName(progress.currentAgent)}` : '',\n                progress.estimatedTimeRemaining ? `**Time Remaining:** ${Math.round(progress.estimatedTimeRemaining / 60)} minutes` : '',\n                '',\n                '**Completed Tasks:**',\n                ...progress.completedTasks.map(task => `- ${task}`),\n                '',\n                '**Remaining Tasks:**',\n                ...progress.remainingTasks.map(task => `- ${task}`)\n            ].filter(line => line !== '').join('\\n');\n\n            await vscode.window.showInformationMessage(\n                'BMAD Workflow Progress',\n                { modal: true, detail: details },\n                'OK'\n            );\n        } else {\n            vscode.window.showInformationMessage('No active workflow progress to display');\n        }\n    }\n\n    /**\n     * Show mode details\n     */\n    private async showModeDetails(): Promise<void> {\n        const statusInfo = this.statusBar.getCurrentInfo();\n        \n        if (statusInfo.mode) {\n            const details = [\n                `**Active Mode:** ${this.getModeDisplayName(statusInfo.mode)}`,\n                `**Description:** ${this.getModeDescription(statusInfo.mode)}`,\n                '',\n                '**Active Agents:**',\n                ...statusInfo.activeAgents.map(agent => `- ${this.getAgentDisplayName(agent)}`),\n                '',\n                `**Last Updated:** ${statusInfo.lastUpdate.toLocaleString()}`\n            ].join('\\n');\n\n            await vscode.window.showInformationMessage(\n                'BMAD Mode Details',\n                { modal: true, detail: details },\n                'OK'\n            );\n        } else {\n            vscode.window.showInformationMessage('No active BMAD mode');\n        }\n    }\n\n    /**\n     * Show error details\n     */\n    private async showErrorDetails(): Promise<void> {\n        // Implementation for showing error details\n        vscode.window.showInformationMessage('Error details functionality coming soon!');\n    }\n\n    /**\n     * Handle configuration changes\n     */\n    private onConfigurationChanged(config: any): void {\n        console.log('BMAD configuration changed:', config);\n        // Handle configuration changes if needed\n    }\n\n    // Helper methods\n    private getModeDisplayName(mode: BMadMode): string {\n        const modeNames: Record<BMadMode, string> = {\n            documentation: 'Documentation Mode',\n            fullDevelopment: 'Full Development Mode',\n            continueProject: 'Continue Existing Project',\n            taskOverview: 'Task List Overview',\n            debugMode: 'Debug & Troubleshoot',\n            continuousExecution: 'Continuous Execution',\n            featureGapAnalysis: 'Feature Gap Analysis',\n            githubIntegration: 'GitHub Integration'\n        };\n        return modeNames[mode] || mode;\n    }\n\n    private getModeDescription(mode: BMadMode): string {\n        const descriptions: Record<BMadMode, string> = {\n            documentation: 'Generate comprehensive project documentation with collaborative AI agents',\n            fullDevelopment: 'Complete application development workflow with full AI agent support',\n            continueProject: 'Resume interrupted project work with full context restoration',\n            taskOverview: 'Comprehensive project status dashboard and task management',\n            debugMode: 'Systematic issue diagnosis and resolution through specialist AI collaboration',\n            continuousExecution: 'Autonomous workflow execution without interruption prompts',\n            featureGapAnalysis: 'Comprehensive analysis of missing features and improvement opportunities',\n            githubIntegration: 'Professional GitHub repository documentation and workflow management'\n        };\n        return descriptions[mode] || 'BMAD workflow mode';\n    }\n\n    private getAgentDisplayName(agentId: AgentId): string {\n        const agentNames: Record<AgentId, string> = {\n            john: 'John (Product Manager)',\n            fred: 'Fred (Architect)',\n            jane: 'Jane (Design Architect)',\n            sage: 'Sage (Security Engineer)',\n            alex: 'Alex (Platform Engineer)',\n            tyler: 'Tyler (Task Breakdown Specialist)',\n            taylor: 'Taylor (Technical Writer)',\n            sarah: 'Sarah (Product Owner)',\n            bob: 'Bob (Scrum Master)',\n            dakota: 'Dakota (Dependency Modernization Specialist)'\n        };\n        return agentNames[agentId] || agentId;\n    }\n\n    private getAvailableAgents() {\n        return [\n            { id: 'john', name: 'John', title: 'Product Manager', description: 'Product requirements and planning', icon: '$(person)' },\n            { id: 'fred', name: 'Fred', title: 'Architect', description: 'System architecture and technical design', icon: '$(tools)' },\n            { id: 'jane', name: 'Jane', title: 'Design Architect', description: 'UI/UX and frontend architecture', icon: '$(paintcan)' },\n            { id: 'sage', name: 'Sage', title: 'Security Engineer', description: 'Security analysis and vulnerability assessment', icon: '$(shield)' },\n            { id: 'alex', name: 'Alex', title: 'Platform Engineer', description: 'Infrastructure and DevOps', icon: '$(server)' },\n            { id: 'tyler', name: 'Tyler', title: 'Task Breakdown Specialist', description: 'Task management and workflow organization', icon: '$(checklist)' },\n            { id: 'taylor', name: 'Taylor', title: 'Technical Writer', description: 'Documentation and technical writing', icon: '$(book)' },\n            { id: 'sarah', name: 'Sarah', title: 'Product Owner', description: 'Product ownership and stakeholder management', icon: '$(account)' },\n            { id: 'bob', name: 'Bob', title: 'Scrum Master', description: 'Agile process facilitation', icon: '$(organization)' }\n        ];\n    }\n\n    private buildAnalysisMessage(analysis: any): string {\n        const project = analysis.projectAnalysis;\n        return `Workspace Analysis Complete\\n\\nProject Type: ${project.type}\\nFramework: ${project.framework}\\nComplexity: ${project.complexity}\\nRecommended Mode: ${project.recommendedMode}\\nConfidence: ${Math.round(project.confidence * 100)}%`;\n    }\n\n    private async showAnalysisDetails(analysis: any): Promise<void> {\n        // Implementation for showing detailed analysis\n        const project = analysis.projectAnalysis;\n        const details = [\n            `**Project Analysis Results**`,\n            '',\n            `Type: ${project.type}`,\n            `Framework: ${project.framework}`,\n            `Language: ${project.language}`,\n            `Complexity: ${project.complexity}`,\n            `Confidence: ${Math.round(project.confidence * 100)}%`,\n            '',\n            '**Features:**',\n            `Frontend: ${project.hasFrontend ? 'Yes' : 'No'}`,\n            `Backend: ${project.hasBackend ? 'Yes' : 'No'}`,\n            `Database: ${project.hasDatabase ? 'Yes' : 'No'}`,\n            `Authentication: ${project.hasAuthentication ? 'Yes' : 'No'}`,\n            `Docker: ${project.hasDocker ? 'Yes' : 'No'}`,\n            `Tests: ${project.hasTests ? 'Yes' : 'No'}`,\n            '',\n            `**Recommended Mode:** ${project.recommendedMode}`,\n            `**Recommended Agents:** ${project.recommendedAgents.join(', ')}`\n        ].join('\\n');\n\n        await vscode.window.showInformationMessage(\n            'Detailed Analysis Results',\n            { modal: true, detail: details },\n            'OK'\n        );\n    }\n\n    // Augment Integration Command Implementations\n\n    /**\n     * Debug the currently active file\n     */\n    private async debugCurrentFile(): Promise<void> {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            await vscode.window.showWarningMessage('No active file to debug');\n            return;\n        }\n\n        try {\n            this.statusBar.showLoading('Analyzing file for debugging');\n\n            // Activate debug mode with file context\n            await this.activateMode('debugMode');\n\n            await vscode.window.showInformationMessage(\n                `BMAD Debug Mode activated for ${editor.document.fileName}`\n            );\n        } catch (error) {\n            this.statusBar.showError(`Failed to debug file: ${error}`);\n        }\n    }\n\n    /**\n     * Generate documentation for the currently active file\n     */\n    private async documentCurrentFile(): Promise<void> {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            await vscode.window.showWarningMessage('No active file to document');\n            return;\n        }\n\n        try {\n            this.statusBar.showLoading('Generating documentation');\n\n            // Activate documentation mode with file context\n            await this.activateMode('documentation');\n\n            await vscode.window.showInformationMessage(\n                `BMAD Documentation Mode activated for ${editor.document.fileName}`\n            );\n        } catch (error) {\n            this.statusBar.showError(`Failed to document file: ${error}`);\n        }\n    }\n\n    /**\n     * Debug the currently selected code\n     */\n    private async debugSelection(): Promise<void> {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor || editor.selection.isEmpty) {\n            await vscode.window.showWarningMessage('No code selected for debugging');\n            return;\n        }\n\n        try {\n            this.statusBar.showLoading('Analyzing selection for debugging');\n\n            const selectedText = editor.document.getText(editor.selection);\n\n            // Show debug analysis for selection\n            await vscode.window.showInformationMessage(\n                `BMAD Debug Analysis`,\n                { modal: true, detail: `Analyzing selected code:\\n\\n${selectedText.substring(0, 200)}...` },\n                'Continue with Debug Mode'\n            ).then(async (action) => {\n                if (action === 'Continue with Debug Mode') {\n                    await this.activateMode('debugMode');\n                }\n            });\n        } catch (error) {\n            this.statusBar.showError(`Failed to debug selection: ${error}`);\n        }\n    }\n\n    /**\n     * Explain the current code context\n     */\n    private async explainCode(): Promise<void> {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            await vscode.window.showWarningMessage('No active file to explain');\n            return;\n        }\n\n        try {\n            this.statusBar.showLoading('Analyzing code for explanation');\n\n            const text = editor.selection.isEmpty\n                ? editor.document.getText()\n                : editor.document.getText(editor.selection);\n\n            await vscode.window.showInformationMessage(\n                `BMAD Code Explanation`,\n                { modal: true, detail: `Ready to explain code context. Use Documentation Mode for detailed analysis.` },\n                'Start Documentation Mode'\n            ).then(async (action) => {\n                if (action === 'Start Documentation Mode') {\n                    await this.activateMode('documentation');\n                }\n            });\n        } catch (error) {\n            this.statusBar.showError(`Failed to explain code: ${error}`);\n        }\n    }\n\n    /**\n     * Generate tests for the current file\n     */\n    private async generateTests(): Promise<void> {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            await vscode.window.showWarningMessage('No active file for test generation');\n            return;\n        }\n\n        try {\n            this.statusBar.showLoading('Preparing test generation');\n\n            await vscode.window.showInformationMessage(\n                `BMAD Test Generation`,\n                { modal: true, detail: `Ready to generate tests for ${editor.document.fileName}. Use Full Development Mode for comprehensive test generation.` },\n                'Start Full Development Mode'\n            ).then(async (action) => {\n                if (action === 'Start Full Development Mode') {\n                    await this.activateMode('fullDevelopment');\n                }\n            });\n        } catch (error) {\n            this.statusBar.showError(`Failed to generate tests: ${error}`);\n        }\n    }\n\n    /**\n     * Analyze a specific folder\n     */\n    private async analyzeFolder(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Analyzing folder');\n\n            const analysis = await this.analyzer.analyzeWorkspace();\n            await this.showAnalysisDetails(analysis);\n        } catch (error) {\n            this.statusBar.showError(`Failed to analyze folder: ${error}`);\n        }\n    }\n\n    /**\n     * Generate documentation for a specific folder\n     */\n    private async generateDocsForFolder(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Generating folder documentation');\n\n            await this.activateMode('documentation');\n\n            await vscode.window.showInformationMessage(\n                'BMAD Documentation Mode activated for folder analysis'\n            );\n        } catch (error) {\n            this.statusBar.showError(`Failed to generate folder documentation: ${error}`);\n        }\n    }\n\n    /**\n     * Refresh workspace analysis\n     */\n    private async refreshAnalysis(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Refreshing analysis');\n\n            const analysis = await this.analyzer.analyzeWorkspace();\n            this.statusBar.updateMode(\n                analysis.projectAnalysis.recommendedMode as BMadMode,\n                analysis.projectAnalysis.recommendedAgents\n            );\n\n            await vscode.window.showInformationMessage(\n                'Workspace analysis refreshed successfully'\n            );\n        } catch (error) {\n            this.statusBar.showError(`Failed to refresh analysis: ${error}`);\n        }\n    }\n\n    /**\n     * Open BMAD settings\n     */\n    private async openSettings(): Promise<void> {\n        await vscode.commands.executeCommand('workbench.action.openSettings', 'bmad');\n    }\n\n    /**\n     * Show BMAD help information\n     */\n    private async showHelp(): Promise<void> {\n        const helpContent = [\n            '# BMAD AI Agent Orchestrator Help',\n            '',\n            '## Available Modes:',\n            '- **Documentation Mode**: Generate PRD, Architecture, and Checklist',\n            '- **Full Development Mode**: Complete application development',\n            '- **Debug Mode**: Systematic issue diagnosis and resolution',\n            '- **Continue Project**: Resume work on existing projects',\n            '- **Task Overview**: View and manage project tasks',\n            '',\n            '## Quick Actions:',\n            '- Press `Ctrl+Shift+B` for Quick Mode Selection',\n            '- Use Command Palette (`Ctrl+Shift+P`) and search for \"BMAD\"',\n            '- Right-click folders for context menu options',\n            '',\n            '## Integration:',\n            '- Works seamlessly with Augment AI Code extension',\n            '- Provides menu options and workflow integration',\n            '- Supports both standalone and integrated usage'\n        ].join('\\n');\n\n        await vscode.window.showInformationMessage(\n            'BMAD Help',\n            { modal: true, detail: helpContent },\n            'Open Documentation',\n            'Quick Start'\n        ).then(async (action) => {\n            if (action === 'Quick Start') {\n                await this.showQuickModeSelector();\n            } else if (action === 'Open Documentation') {\n                await vscode.env.openExternal(vscode.Uri.parse('https://github.com/bmad-code/bmad-vscode-extension'));\n            }\n        });\n    }\n\n    private processDiagnostics(diagnostics: readonly [vscode.Uri, vscode.Diagnostic[]][]): any[] {\n        const issues: any[] = [];\n        \n        for (const [uri, diags] of diagnostics) {\n            for (const diag of diags) {\n                if (diag.severity === vscode.DiagnosticSeverity.Error) {\n                    issues.push({\n                        severity: 'critical',\n                        category: 'quality',\n                        message: diag.message,\n                        file: uri.fsPath,\n                        line: diag.range.start.line,\n                        canAutoFix: false\n                    });\n                }\n            }\n        }\n        \n        return issues;\n    }\n\n    // Dakota (Dependency Modernization) Command Implementations\n\n    /**\n     * Perform comprehensive dependency audit\n     */\n    private async performDependencyAudit(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Starting dependency audit...');\n\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n\n            const message = `Dependency Audit Complete!\\n\\n` +\n                `📦 Total Dependencies: ${auditResult.totalDependencies}\\n` +\n                `🛡️ Security Issues: ${auditResult.vulnerabilities.length}\\n` +\n                `📈 Outdated Packages: ${auditResult.outdatedPackages.length}\\n` +\n                `💯 Health Score: ${auditResult.healthScore}/100\\n\\n` +\n                `📋 Recommendations: ${auditResult.recommendations.length} actions identified`;\n\n            await vscode.window.showInformationMessage(\n                'Dakota: Dependency Audit Results',\n                { modal: true, detail: message },\n                'View Report',\n                'Start Modernization'\n            ).then(async (action) => {\n                if (action === 'View Report') {\n                    // Open the generated report\n                    const reportPath = vscode.Uri.file(`${auditResult.projectPath}/dependency-audit-report.md`);\n                    await vscode.window.showTextDocument(reportPath);\n                } else if (action === 'Start Modernization') {\n                    await this.performDependencyModernization();\n                }\n            });\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Audit failed - ${error}`);\n            await vscode.window.showErrorMessage(`Dependency audit failed: ${error}`);\n        }\n    }\n\n    /**\n     * Perform dependency modernization\n     */\n    private async performDependencyModernization(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Modernizing dependencies...');\n\n            // First perform audit to get current state\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n\n            if (auditResult.recommendations.length === 0) {\n                await vscode.window.showInformationMessage(\n                    'Dakota: All dependencies are up to date!',\n                    'No modernization needed at this time.'\n                );\n                return;\n            }\n\n            // Show modernization plan\n            const criticalUpdates = auditResult.recommendations.filter(r => r.riskLevel === 'critical').length;\n            const autoUpdates = auditResult.recommendations.filter(r => r.action === 'auto-update').length;\n            const manualReviews = auditResult.recommendations.filter(r => r.action === 'manual-review').length;\n\n            const planMessage = `Modernization Plan:\\n\\n` +\n                `🚨 Critical Security Updates: ${criticalUpdates}\\n` +\n                `⚡ Automatic Updates: ${autoUpdates}\\n` +\n                `👀 Manual Reviews Required: ${manualReviews}\\n\\n` +\n                `Dakota will handle automatic updates safely and present manual reviews for your approval.`;\n\n            const proceed = await vscode.window.showWarningMessage(\n                'Dakota: Dependency Modernization Plan',\n                { modal: true, detail: planMessage },\n                'Proceed with Modernization',\n                'Cancel'\n            );\n\n            if (proceed === 'Proceed with Modernization') {\n                await this.dakotaAgent.performDependencyModernization(auditResult);\n\n                await vscode.window.showInformationMessage(\n                    'Dakota: Modernization Complete!',\n                    `Successfully updated ${autoUpdates} dependencies. ${manualReviews} items require your review.`\n                );\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Modernization failed - ${error}`);\n            await vscode.window.showErrorMessage(`Dependency modernization failed: ${error}`);\n        }\n    }\n\n    /**\n     * Start background dependency monitoring\n     */\n    private async startDependencyMonitoring(): Promise<void> {\n        try {\n            await this.dakotaAgent.startDependencyMonitoring();\n\n            await vscode.window.showInformationMessage(\n                'Dakota: Background Monitoring Started',\n                'Dakota will now monitor your dependencies for security issues and updates in the background.'\n            );\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Failed to start monitoring - ${error}`);\n            await vscode.window.showErrorMessage(`Failed to start dependency monitoring: ${error}`);\n        }\n    }\n\n    /**\n     * Stop background dependency monitoring\n     */\n    private async stopDependencyMonitoring(): Promise<void> {\n        try {\n            this.dakotaAgent.stopDependencyMonitoring();\n\n            await vscode.window.showInformationMessage(\n                'Dakota: Background Monitoring Stopped',\n                'Dependency monitoring has been disabled.'\n            );\n\n        } catch (error) {\n            await vscode.window.showErrorMessage(`Failed to stop dependency monitoring: ${error}`);\n        }\n    }\n\n    /**\n     * Check for security vulnerabilities\n     */\n    private async checkSecurityVulnerabilities(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Scanning for security vulnerabilities...');\n\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n            const vulnerabilities = auditResult.vulnerabilities;\n\n            if (vulnerabilities.length === 0) {\n                await vscode.window.showInformationMessage(\n                    'Dakota: Security Scan Complete',\n                    '✅ No security vulnerabilities found in your dependencies!'\n                );\n                return;\n            }\n\n            const critical = vulnerabilities.filter(v => v.severity === 'critical').length;\n            const high = vulnerabilities.filter(v => v.severity === 'high').length;\n            const medium = vulnerabilities.filter(v => v.severity === 'medium').length;\n            const low = vulnerabilities.filter(v => v.severity === 'low').length;\n\n            const message = `Security Vulnerabilities Found:\\n\\n` +\n                `🚨 Critical: ${critical}\\n` +\n                `⚠️ High: ${high}\\n` +\n                `📋 Medium: ${medium}\\n` +\n                `ℹ️ Low: ${low}\\n\\n` +\n                `Total: ${vulnerabilities.length} vulnerabilities detected`;\n\n            await vscode.window.showWarningMessage(\n                'Dakota: Security Vulnerabilities Detected',\n                { modal: true, detail: message },\n                'View Details',\n                'Start Remediation'\n            ).then(async (action) => {\n                if (action === 'View Details') {\n                    // Show detailed vulnerability report\n                    const reportPath = vscode.Uri.file(`${auditResult.projectPath}/dependency-audit-report.md`);\n                    await vscode.window.showTextDocument(reportPath);\n                } else if (action === 'Start Remediation') {\n                    await this.performDependencyModernization();\n                }\n            });\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Security scan failed - ${error}`);\n            await vscode.window.showErrorMessage(`Security vulnerability scan failed: ${error}`);\n        }\n    }\n\n    /**\n     * Update outdated dependencies\n     */\n    private async updateOutdatedDependencies(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Checking for outdated dependencies...');\n\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n            const outdated = auditResult.outdatedPackages;\n\n            if (outdated.length === 0) {\n                await vscode.window.showInformationMessage(\n                    'Dakota: Dependencies Up to Date',\n                    '✅ All your dependencies are already at their latest versions!'\n                );\n                return;\n            }\n\n            const safeUpdates = outdated.filter(dep =>\n                dep.updateRecommendation?.action === 'auto-update' &&\n                dep.updateRecommendation?.riskLevel === 'low'\n            ).length;\n\n            const message = `Outdated Dependencies Found:\\n\\n` +\n                `📦 Total Outdated: ${outdated.length}\\n` +\n                `✅ Safe Auto-Updates: ${safeUpdates}\\n` +\n                `👀 Require Review: ${outdated.length - safeUpdates}\\n\\n` +\n                `Dakota can safely update ${safeUpdates} dependencies automatically.`;\n\n            await vscode.window.showInformationMessage(\n                'Dakota: Outdated Dependencies',\n                { modal: true, detail: message },\n                'Update Safe Dependencies',\n                'Full Modernization'\n            ).then(async (action) => {\n                if (action === 'Update Safe Dependencies') {\n                    // Update only safe dependencies\n                    await this.dakotaAgent.performDependencyModernization(auditResult);\n                } else if (action === 'Full Modernization') {\n                    await this.performDependencyModernization();\n                }\n            });\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Update check failed - ${error}`);\n            await vscode.window.showErrorMessage(`Failed to check for outdated dependencies: ${error}`);\n        }\n    }\n\n    /**\n     * Generate comprehensive dependency report\n     */\n    private async generateDependencyReport(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Generating dependency report...');\n\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n\n            await vscode.window.showInformationMessage(\n                'Dakota: Dependency Report Generated',\n                `📋 Comprehensive dependency report has been generated with ${auditResult.totalDependencies} dependencies analyzed.`,\n                'Open Report'\n            ).then(async (action) => {\n                if (action === 'Open Report') {\n                    const reportPath = vscode.Uri.file(`${auditResult.projectPath}/dependency-audit-report.md`);\n                    await vscode.window.showTextDocument(reportPath);\n                }\n            });\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: Report generation failed - ${error}`);\n            await vscode.window.showErrorMessage(`Failed to generate dependency report: ${error}`);\n        }\n    }\n\n    /**\n     * Analyze dependency licenses\n     */\n    private async analyzeDependencyLicenses(): Promise<void> {\n        try {\n            this.statusBar.showLoading('Dakota: Analyzing dependency licenses...');\n\n            const auditResult = await this.dakotaAgent.performDependencyAudit();\n\n            // This would analyze license compatibility\n            // For now, show a placeholder message\n            await vscode.window.showInformationMessage(\n                'Dakota: License Analysis Complete',\n                `📄 License analysis completed for ${auditResult.totalDependencies} dependencies. Check the full report for details.`,\n                'View Report'\n            ).then(async (action) => {\n                if (action === 'View Report') {\n                    const reportPath = vscode.Uri.file(`${auditResult.projectPath}/dependency-audit-report.md`);\n                    await vscode.window.showTextDocument(reportPath);\n                }\n            });\n\n        } catch (error) {\n            this.statusBar.showError(`Dakota: License analysis failed - ${error}`);\n            await vscode.window.showErrorMessage(`License analysis failed: ${error}`);\n        }\n    }\n}\n","import * as vscode from 'vscode';\nimport { BMadOrchestrator } from '../orchestrator/BMadOrchestrator';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\nimport { StatusBarManager } from '../ui/StatusBarManager';\nimport { BMadMode, ProjectAnalysis, AgentId } from '../types/BMadTypes';\n\n/**\n * Integration interface for Augment AI Code extension\n * Provides BMAD functionality as menu options within Augment's interface\n */\nexport class AugmentIntegration {\n    private orchestrator: BMadOrchestrator;\n    private analyzer: WorkspaceAnalyzer;\n    private statusBar: StatusBarManager;\n    private augmentExtension: vscode.Extension<any> | undefined;\n    private isIntegrated: boolean = false;\n\n    constructor(\n        orchestrator: BMadOrchestrator,\n        analyzer: WorkspaceAnalyzer,\n        statusBar: StatusBarManager\n    ) {\n        this.orchestrator = orchestrator;\n        this.analyzer = analyzer;\n        this.statusBar = statusBar;\n    }\n\n    /**\n     * Initialize integration with Augment AI Code extension\n     */\n    async initialize(): Promise<void> {\n        try {\n            // Check if Augment AI Code extension is available\n            this.augmentExtension = vscode.extensions.getExtension('augment.ai-code') ||\n                                   vscode.extensions.getExtension('augment.code') ||\n                                   vscode.extensions.getExtension('augment-ai.code');\n\n            if (!this.augmentExtension) {\n                console.log('Augment AI Code extension not found. BMAD will use standard VS Code integration.');\n                await this.setupFallbackIntegration();\n                return;\n            }\n\n            // Attempt to integrate with Augment\n            await this.integrateWithAugment();\n\n        } catch (error) {\n            console.error('Failed to initialize Augment integration:', error);\n            await this.setupFallbackIntegration();\n        }\n    }\n\n    /**\n     * Integrate BMAD workflows with Augment extension\n     */\n    private async integrateWithAugment(): Promise<void> {\n        if (!this.augmentExtension) {\n            throw new Error('Augment extension not available');\n        }\n\n        try {\n            // Activate Augment extension to get its API\n            const augmentAPI = await this.augmentExtension.activate();\n\n            // Check if Augment supports workflow provider registration\n            if (augmentAPI && typeof augmentAPI.registerWorkflowProvider === 'function') {\n                await this.registerBmadWorkflowProvider(augmentAPI);\n                this.isIntegrated = true;\n                console.log('Successfully integrated BMAD with Augment AI Code extension');\n            } else {\n                console.log('Augment extension does not support workflow provider API. Using fallback integration.');\n                await this.setupFallbackIntegration();\n            }\n\n        } catch (error) {\n            console.error('Failed to integrate with Augment:', error);\n            await this.setupFallbackIntegration();\n        }\n    }\n\n    /**\n     * Register BMAD as a workflow provider with Augment\n     */\n    private async registerBmadWorkflowProvider(augmentAPI: any): Promise<void> {\n        const workflowProvider = {\n            id: 'bmad-orchestrator',\n            name: '🟣 BMAD AI Agent Orchestrator',\n            description: 'Collaborative AI agent workflows for comprehensive development',\n            icon: '$(robot)',\n            color: '#8B5CF6', // Purple color\n            workflows: [\n                {\n                    id: 'documentation-mode',\n                    name: '📚 Documentation Mode',\n                    description: 'Generate comprehensive project documentation (PRD, Architecture, Checklist)',\n                    icon: '$(book)',\n                    category: 'Planning',\n                    color: '#8B5CF6',\n                    handler: this.handleDocumentationMode.bind(this)\n                },\n                {\n                    id: 'full-development-mode',\n                    name: '🚀 Full Development Mode',\n                    description: 'Complete application development with AI agents',\n                    icon: '$(rocket)',\n                    category: 'Development',\n                    color: '#8B5CF6',\n                    handler: this.handleFullDevelopmentMode.bind(this)\n                },\n                {\n                    id: 'debug-mode',\n                    name: 'Debug & Troubleshoot',\n                    description: 'Systematic issue diagnosis and resolution',\n                    icon: '$(debug)',\n                    category: 'Debugging',\n                    handler: this.handleDebugMode.bind(this)\n                },\n                {\n                    id: 'continue-project',\n                    name: 'Continue Project',\n                    description: 'Resume work on existing project with context awareness',\n                    icon: '$(debug-continue)',\n                    category: 'Development',\n                    handler: this.handleContinueProject.bind(this)\n                },\n                {\n                    id: 'task-overview',\n                    name: 'Task Overview',\n                    description: 'View and manage project tasks and progress',\n                    icon: '$(list-tree)',\n                    category: 'Management',\n                    handler: this.handleTaskOverview.bind(this)\n                },\n                {\n                    id: 'continuous-execution',\n                    name: 'Continuous Execution',\n                    description: 'Autonomous workflow execution without user prompts',\n                    icon: '$(sync)',\n                    category: 'Automation',\n                    handler: this.handleContinuousExecution.bind(this)\n                },\n                {\n                    id: 'feature-gap-analysis',\n                    name: 'Feature Gap Analysis',\n                    description: 'Analyze missing features and implementation gaps',\n                    icon: '$(search)',\n                    category: 'Analysis',\n                    handler: this.handleFeatureGapAnalysis.bind(this)\n                },\n                {\n                    id: 'github-integration',\n                    name: 'GitHub Integration',\n                    description: 'Automated GitHub workflow and issue management',\n                    icon: '$(github)',\n                    category: 'Integration',\n                    handler: this.handleGithubIntegration.bind(this)\n                },\n                {\n                    id: 'dependency-audit',\n                    name: '🔍 Dakota: Dependency Audit',\n                    description: 'Comprehensive dependency analysis with Context7 research',\n                    icon: '$(search)',\n                    category: 'Maintenance',\n                    handler: this.handleDependencyAudit.bind(this)\n                },\n                {\n                    id: 'dependency-modernization',\n                    name: '⬆️ Dakota: Dependency Modernization',\n                    description: 'Automated dependency updates and modernization',\n                    icon: '$(arrow-up)',\n                    category: 'Maintenance',\n                    handler: this.handleDependencyModernization.bind(this)\n                },\n                {\n                    id: 'security-scan',\n                    name: '🛡️ Dakota: Security Scan',\n                    description: 'Real-time security vulnerability detection and remediation',\n                    icon: '$(shield)',\n                    category: 'Security',\n                    handler: this.handleSecurityScan.bind(this)\n                }\n            ]\n        };\n\n        await augmentAPI.registerWorkflowProvider(workflowProvider);\n    }\n\n    /**\n     * Setup fallback integration using standard VS Code APIs\n     */\n    private async setupFallbackIntegration(): Promise<void> {\n        // Register BMAD menu items in VS Code's standard locations\n        await this.registerVSCodeMenus();\n        console.log('BMAD fallback integration initialized');\n    }\n\n    /**\n     * Register BMAD commands in VS Code menus\n     */\n    private async registerVSCodeMenus(): Promise<void> {\n        // Commands are already registered by CommandManager\n        // This method can be extended to add additional menu contributions\n        \n        // Show notification about BMAD availability\n        const action = await vscode.window.showInformationMessage(\n            'BMAD AI Agent Orchestrator is ready! Access workflows via Command Palette (Ctrl+Shift+P) or status bar.',\n            'Show Commands',\n            'Quick Start'\n        );\n\n        if (action === 'Show Commands') {\n            await vscode.commands.executeCommand('workbench.action.showCommands');\n        } else if (action === 'Quick Start') {\n            await vscode.commands.executeCommand('bmad.quickModeSelect');\n        }\n    }\n\n    // Workflow Handlers - Bridge Augment UI to BMAD Orchestrator\n\n    /**\n     * Handle Documentation Mode workflow\n     */\n    private async handleDocumentationMode(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Documentation Mode');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('documentation', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('documentation', analysisResult.projectAnalysis.recommendedAgents);\n            \n            // Notify Augment of completion if context provided\n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Documentation Mode completed successfully',\n                    outputs: ['prd.md', 'architecture.md', 'checklist.md']\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Documentation Mode failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Full Development Mode workflow\n     */\n    private async handleFullDevelopmentMode(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Full Development Mode');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('fullDevelopment', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('fullDevelopment', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Full Development Mode initiated successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Full Development Mode failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Debug Mode workflow\n     */\n    private async handleDebugMode(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Debug Mode');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('debugMode', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('debugMode', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Debug Mode completed successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Debug Mode failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Continue Project workflow\n     */\n    private async handleContinueProject(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Continuing Project');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('continueProject', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('continueProject', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Project continuation initiated successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Continue Project failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Task Overview workflow\n     */\n    private async handleTaskOverview(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Loading Task Overview');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('taskOverview', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('taskOverview', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Task Overview loaded successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Task Overview failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Continuous Execution workflow\n     */\n    private async handleContinuousExecution(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Starting Continuous Execution');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('continuousExecution', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('continuousExecution', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Continuous Execution started successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Continuous Execution failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle Feature Gap Analysis workflow\n     */\n    private async handleFeatureGapAnalysis(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Analyzing Feature Gaps');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('featureGapAnalysis', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('featureGapAnalysis', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'Feature Gap Analysis completed successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`Feature Gap Analysis failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Handle GitHub Integration workflow\n     */\n    private async handleGithubIntegration(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing GitHub Integration');\n\n            const analysisResult = await this.analyzer.analyzeWorkspace();\n            await this.orchestrator.executeMode('githubIntegration', analysisResult.projectAnalysis);\n\n            this.statusBar.updateMode('githubIntegration', analysisResult.projectAnalysis.recommendedAgents);\n            \n            if (context && typeof context.onComplete === 'function') {\n                context.onComplete({\n                    success: true,\n                    message: 'GitHub Integration completed successfully'\n                });\n            }\n\n        } catch (error) {\n            this.statusBar.showError(`GitHub Integration failed: ${error}`);\n            if (context && typeof context.onError === 'function') {\n                context.onError(error);\n            }\n        }\n    }\n\n    /**\n     * Check if integration with Augment is active\n     */\n    isAugmentIntegrated(): boolean {\n        return this.isIntegrated;\n    }\n\n    /**\n     * Get Augment extension information\n     */\n    getAugmentInfo(): { available: boolean; version?: string; id?: string } {\n        if (!this.augmentExtension) {\n            return { available: false };\n        }\n\n        return {\n            available: true,\n            version: this.augmentExtension.packageJSON?.version,\n            id: this.augmentExtension.id\n        };\n    }\n\n    /**\n     * Handle dependency audit workflow\n     */\n    private async handleDependencyAudit(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Dakota Dependency Audit');\n\n            // Execute dependency audit command\n            await vscode.commands.executeCommand('bmad.dependencyAudit');\n\n            this.statusBar.showSuccess('Dakota: Dependency audit completed');\n\n        } catch (error) {\n            this.statusBar.showError(`Failed to perform dependency audit: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Handle dependency modernization workflow\n     */\n    private async handleDependencyModernization(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Dakota Dependency Modernization');\n\n            // Execute dependency modernization command\n            await vscode.commands.executeCommand('bmad.dependencyModernization');\n\n            this.statusBar.showSuccess('Dakota: Dependency modernization completed');\n\n        } catch (error) {\n            this.statusBar.showError(`Failed to perform dependency modernization: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Handle security vulnerability scan workflow\n     */\n    private async handleSecurityScan(context?: any): Promise<void> {\n        try {\n            this.statusBar.showLoading('Initializing Dakota Security Scan');\n\n            // Execute security vulnerability scan command\n            await vscode.commands.executeCommand('bmad.checkSecurityVulnerabilities');\n\n            this.statusBar.showSuccess('Dakota: Security scan completed');\n\n        } catch (error) {\n            this.statusBar.showError(`Failed to perform security scan: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Dispose of integration resources\n     */\n    dispose(): void {\n        // Clean up any resources if needed\n        this.isIntegrated = false;\n    }\n}\n","import * as vscode from 'vscode';\nimport { BMadConfiguration, BMadMode } from '../types/BMadTypes';\n\nexport class ConfigurationManager {\n    private readonly CONFIG_SECTION = 'bmad';\n    private configurationChangeListener?: vscode.Disposable;\n\n    constructor() {\n        this.setupConfigurationWatcher();\n    }\n\n    /**\n     * Get current BMAD configuration from VS Code settings\n     */\n    getConfiguration(): BMadConfiguration {\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\n        \n        return {\n            autoInitialize: config.get('autoInitialize', true),\n            defaultMode: config.get('defaultMode', 'documentation') as BMadMode,\n            enableRealTimeMonitoring: config.get('enableRealTimeMonitoring', true),\n            autoActivateRecommendedAgents: config.get('autoActivateRecommendedAgents', true),\n            debugModeThreshold: config.get('debugModeThreshold', 5),\n            progressNotifications: config.get('progressNotifications', true),\n            intelligentRecommendations: config.get('intelligentRecommendations', true),\n            statusBarIntegration: config.get('statusBarIntegration', true)\n        };\n    }\n\n    /**\n     * Update BMAD configuration in VS Code settings\n     */\n    async updateConfiguration(updates: Partial<BMadConfiguration>, target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Workspace): Promise<void> {\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\n        \n        for (const [key, value] of Object.entries(updates)) {\n            await config.update(key, value, target);\n        }\n    }\n\n    /**\n     * Get configuration for a specific key with type safety\n     */\n    getConfigValue<T>(key: keyof BMadConfiguration, defaultValue: T): T {\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\n        return config.get(key, defaultValue);\n    }\n\n    /**\n     * Set up configuration change watcher\n     */\n    private setupConfigurationWatcher(): void {\n        this.configurationChangeListener = vscode.workspace.onDidChangeConfiguration((event) => {\n            if (event.affectsConfiguration(this.CONFIG_SECTION)) {\n                this.onConfigurationChanged();\n            }\n        });\n    }\n\n    /**\n     * Handle configuration changes\n     */\n    private onConfigurationChanged(): void {\n        const newConfig = this.getConfiguration();\n        \n        // Emit configuration change event\n        vscode.commands.executeCommand('bmad.internal.configurationChanged', newConfig);\n        \n        console.log('BMAD configuration updated:', newConfig);\n    }\n\n    /**\n     * Validate configuration values\n     */\n    validateConfiguration(config: BMadConfiguration): { isValid: boolean; errors: string[] } {\n        const errors: string[] = [];\n\n        // Validate debug mode threshold\n        if (config.debugModeThreshold < 1 || config.debugModeThreshold > 20) {\n            errors.push('Debug mode threshold must be between 1 and 20');\n        }\n\n        // Validate default mode\n        const validModes: BMadMode[] = [\n            'documentation', 'fullDevelopment', 'continueProject', 'taskOverview',\n            'debugMode', 'continuousExecution', 'featureGapAnalysis', 'githubIntegration'\n        ];\n        \n        if (!validModes.includes(config.defaultMode)) {\n            errors.push(`Invalid default mode: ${config.defaultMode}`);\n        }\n\n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n\n    /**\n     * Reset configuration to defaults\n     */\n    async resetToDefaults(): Promise<void> {\n        const defaultConfig: BMadConfiguration = {\n            autoInitialize: true,\n            defaultMode: 'documentation',\n            enableRealTimeMonitoring: true,\n            autoActivateRecommendedAgents: true,\n            debugModeThreshold: 5,\n            progressNotifications: true,\n            intelligentRecommendations: true,\n            statusBarIntegration: true\n        };\n\n        await this.updateConfiguration(defaultConfig);\n    }\n\n    /**\n     * Export configuration for backup or sharing\n     */\n    exportConfiguration(): string {\n        const config = this.getConfiguration();\n        return JSON.stringify(config, null, 2);\n    }\n\n    /**\n     * Import configuration from JSON string\n     */\n    async importConfiguration(configJson: string): Promise<void> {\n        try {\n            const config = JSON.parse(configJson) as BMadConfiguration;\n            const validation = this.validateConfiguration(config);\n            \n            if (!validation.isValid) {\n                throw new Error(`Invalid configuration: ${validation.errors.join(', ')}`);\n            }\n\n            await this.updateConfiguration(config);\n        } catch (error) {\n            throw new Error(`Failed to import configuration: ${error}`);\n        }\n    }\n\n    /**\n     * Get workspace-specific configuration file path\n     */\n    getWorkspaceConfigPath(): string | undefined {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            return undefined;\n        }\n\n        return vscode.Uri.joinPath(workspaceFolder.uri, '.vscode', 'bmad.json').fsPath;\n    }\n\n    /**\n     * Save configuration to workspace file\n     */\n    async saveWorkspaceConfiguration(): Promise<void> {\n        const configPath = this.getWorkspaceConfigPath();\n        if (!configPath) {\n            throw new Error('No workspace folder available');\n        }\n\n        const config = this.getConfiguration();\n        const configJson = JSON.stringify(config, null, 2);\n        const content = new TextEncoder().encode(configJson);\n\n        await vscode.workspace.fs.writeFile(\n            vscode.Uri.file(configPath),\n            content\n        );\n    }\n\n    /**\n     * Load configuration from workspace file\n     */\n    async loadWorkspaceConfiguration(): Promise<void> {\n        const configPath = this.getWorkspaceConfigPath();\n        if (!configPath) {\n            return;\n        }\n\n        try {\n            const configUri = vscode.Uri.file(configPath);\n            const configData = await vscode.workspace.fs.readFile(configUri);\n            const configJson = new TextDecoder().decode(configData);\n\n            await this.importConfiguration(configJson);\n        } catch (error) {\n            // Workspace config file doesn't exist or is invalid - use defaults\n            console.log('No workspace configuration found, using defaults');\n        }\n    }\n\n    /**\n     * Dispose of resources\n     */\n    dispose(): void {\n        if (this.configurationChangeListener) {\n            this.configurationChangeListener.dispose();\n        }\n    }\n}\n","/**\n * Type definitions for Augment AI Code extension API\n * These interfaces define the expected API structure for integration\n */\n\nexport interface AugmentWorkflow {\n    id: string;\n    name: string;\n    description: string;\n    icon?: string;\n    category?: string;\n    handler: (context?: AugmentWorkflowContext) => Promise<void>;\n}\n\nexport interface AugmentWorkflowProvider {\n    id: string;\n    name: string;\n    description: string;\n    icon?: string;\n    workflows: AugmentWorkflow[];\n}\n\nexport interface AugmentWorkflowContext {\n    workspaceUri?: string;\n    selectedFiles?: string[];\n    activeEditor?: {\n        uri: string;\n        selection?: {\n            start: { line: number; character: number };\n            end: { line: number; character: number };\n        };\n    };\n    onProgress?: (progress: AugmentProgress) => void;\n    onComplete?: (result: AugmentResult) => void;\n    onError?: (error: Error | string) => void;\n    onCancel?: () => void;\n}\n\nexport interface AugmentProgress {\n    message: string;\n    percentage?: number;\n    phase?: string;\n}\n\nexport interface AugmentResult {\n    success: boolean;\n    message: string;\n    outputs?: string[];\n    data?: any;\n}\n\nexport interface AugmentAPI {\n    /**\n     * Register a workflow provider with Augment\n     */\n    registerWorkflowProvider(provider: AugmentWorkflowProvider): Promise<void>;\n\n    /**\n     * Unregister a workflow provider\n     */\n    unregisterWorkflowProvider(providerId: string): Promise<void>;\n\n    /**\n     * Get list of registered workflow providers\n     */\n    getWorkflowProviders(): Promise<AugmentWorkflowProvider[]>;\n\n    /**\n     * Execute a specific workflow\n     */\n    executeWorkflow(providerId: string, workflowId: string, context?: AugmentWorkflowContext): Promise<AugmentResult>;\n\n    /**\n     * Show workflow selection UI\n     */\n    showWorkflowPicker(category?: string): Promise<void>;\n\n    /**\n     * Get Augment extension version and capabilities\n     */\n    getCapabilities(): Promise<AugmentCapabilities>;\n}\n\nexport interface AugmentCapabilities {\n    version: string;\n    features: {\n        workflowProviders: boolean;\n        menuIntegration: boolean;\n        progressReporting: boolean;\n        fileOperations: boolean;\n        contextAwareness: boolean;\n    };\n    supportedCategories: string[];\n}\n\n/**\n * Menu integration interfaces for Augment\n */\nexport interface AugmentMenuItem {\n    id: string;\n    label: string;\n    icon?: string;\n    command?: string;\n    submenu?: AugmentMenuItem[];\n    when?: string;\n    group?: string;\n}\n\nexport interface AugmentMenuProvider {\n    id: string;\n    name: string;\n    menus: {\n        [location: string]: AugmentMenuItem[];\n    };\n}\n\n/**\n * Extended API for menu integration\n */\nexport interface AugmentExtendedAPI extends AugmentAPI {\n    /**\n     * Register menu items with Augment\n     */\n    registerMenuProvider(provider: AugmentMenuProvider): Promise<void>;\n\n    /**\n     * Add items to Augment's context menus\n     */\n    addContextMenuItems(location: string, items: AugmentMenuItem[]): Promise<void>;\n\n    /**\n     * Add items to Augment's main menu\n     */\n    addMainMenuItems(items: AugmentMenuItem[]): Promise<void>;\n\n    /**\n     * Show custom UI panel within Augment\n     */\n    showPanel(panelId: string, content: string | object): Promise<void>;\n\n    /**\n     * Register custom commands with Augment\n     */\n    registerCommands(commands: AugmentCommand[]): Promise<void>;\n}\n\nexport interface AugmentCommand {\n    id: string;\n    title: string;\n    category?: string;\n    icon?: string;\n    handler: (args?: any[]) => Promise<any>;\n}\n\n/**\n * Event interfaces for Augment integration\n */\nexport interface AugmentEvents {\n    onWorkflowStarted: (providerId: string, workflowId: string) => void;\n    onWorkflowCompleted: (providerId: string, workflowId: string, result: AugmentResult) => void;\n    onWorkflowFailed: (providerId: string, workflowId: string, error: Error) => void;\n    onProviderRegistered: (providerId: string) => void;\n    onProviderUnregistered: (providerId: string) => void;\n}\n\n/**\n * Configuration interface for Augment integration\n */\nexport interface AugmentIntegrationConfig {\n    enableWorkflowProvider: boolean;\n    enableMenuIntegration: boolean;\n    enableProgressReporting: boolean;\n    defaultCategory: string;\n    fallbackToVSCode: boolean;\n    showNotifications: boolean;\n}\n\n/**\n * Type guard to check if an object implements AugmentAPI\n */\nexport function isAugmentAPI(obj: any): obj is AugmentAPI {\n    return obj &&\n           typeof obj.registerWorkflowProvider === 'function' &&\n           typeof obj.unregisterWorkflowProvider === 'function' &&\n           typeof obj.getWorkflowProviders === 'function';\n}\n\n/**\n * Type guard to check if an object implements AugmentExtendedAPI\n */\nexport function isAugmentExtendedAPI(obj: any): obj is AugmentExtendedAPI {\n    return isAugmentAPI(obj) &&\n           typeof (obj as any).addMainMenuItems === 'function' &&\n           typeof (obj as any).showPanel === 'function';\n}\n\n/**\n * Default configuration for Augment integration\n */\nexport const DEFAULT_AUGMENT_CONFIG: AugmentIntegrationConfig = {\n    enableWorkflowProvider: true,\n    enableMenuIntegration: true,\n    enableProgressReporting: true,\n    defaultCategory: 'AI Workflows',\n    fallbackToVSCode: true,\n    showNotifications: true\n};\n","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Context7Integration, Context7ResearchResult } from '../integration/Context7Integration';\nimport { StatusBarManager } from '../ui/StatusBarManager';\n\n/**\n * Background Dependency Monitoring System for Dakota Agent\n * Provides continuous monitoring of dependencies with configurable policies\n * and minimal performance impact on VS Code\n */\n\nexport interface MonitoringPolicy {\n    securityCheckInterval: number; // milliseconds\n    updateCheckInterval: number; // milliseconds\n    autoUpdateEnabled: boolean;\n    autoUpdateRiskLevel: 'low' | 'medium' | 'high';\n    notificationThreshold: 'critical' | 'high' | 'medium' | 'low';\n    backgroundProcessingEnabled: boolean;\n    maxConcurrentChecks: number;\n}\n\nexport interface MonitoringAlert {\n    id: string;\n    type: 'security' | 'update' | 'maintenance' | 'license';\n    severity: 'critical' | 'high' | 'medium' | 'low';\n    packageName: string;\n    currentVersion: string;\n    message: string;\n    actionRequired: boolean;\n    timestamp: Date;\n    context7Research?: Context7ResearchResult;\n}\n\nexport interface MonitoringStats {\n    totalPackagesMonitored: number;\n    lastSecurityCheck: Date | null;\n    lastUpdateCheck: Date | null;\n    alertsGenerated: number;\n    autoUpdatesPerformed: number;\n    context7QueriesExecuted: number;\n    averageResponseTime: number;\n}\n\n/**\n * Background Dependency Monitor\n * Runs continuous monitoring with minimal performance impact\n */\nexport class DependencyMonitor {\n    private context7: Context7Integration;\n    private statusBar: StatusBarManager;\n    private isMonitoring: boolean = false;\n    private monitoringPolicy: MonitoringPolicy;\n    private activeAlerts: Map<string, MonitoringAlert> = new Map();\n    private monitoringStats: MonitoringStats;\n    private securityCheckTimer: NodeJS.Timeout | null = null;\n    private updateCheckTimer: NodeJS.Timeout | null = null;\n    private workspaceWatcher: vscode.FileSystemWatcher | null = null;\n\n    constructor(\n        context7: Context7Integration,\n        statusBar: StatusBarManager,\n        policy?: Partial<MonitoringPolicy>\n    ) {\n        this.context7 = context7;\n        this.statusBar = statusBar;\n        \n        // Default monitoring policy\n        this.monitoringPolicy = {\n            securityCheckInterval: 4 * 60 * 60 * 1000, // 4 hours\n            updateCheckInterval: 24 * 60 * 60 * 1000, // 24 hours\n            autoUpdateEnabled: true,\n            autoUpdateRiskLevel: 'low',\n            notificationThreshold: 'medium',\n            backgroundProcessingEnabled: true,\n            maxConcurrentChecks: 3,\n            ...policy\n        };\n\n        this.monitoringStats = {\n            totalPackagesMonitored: 0,\n            lastSecurityCheck: null,\n            lastUpdateCheck: null,\n            alertsGenerated: 0,\n            autoUpdatesPerformed: 0,\n            context7QueriesExecuted: 0,\n            averageResponseTime: 0\n        };\n\n        this.loadConfiguration();\n    }\n\n    /**\n     * Start background monitoring\n     */\n    async startMonitoring(): Promise<void> {\n        if (this.isMonitoring) {\n            return;\n        }\n\n        this.isMonitoring = true;\n        console.log('Dakota: Starting background dependency monitoring');\n\n        // Set up file system watchers for dependency files\n        this.setupFileWatchers();\n\n        // Schedule periodic checks\n        this.scheduleSecurityChecks();\n        this.scheduleUpdateChecks();\n\n        // Perform initial scan\n        await this.performInitialScan();\n\n        this.statusBar.showInfo('Dakota: Background monitoring active');\n    }\n\n    /**\n     * Stop background monitoring\n     */\n    stopMonitoring(): void {\n        if (!this.isMonitoring) {\n            return;\n        }\n\n        this.isMonitoring = false;\n        console.log('Dakota: Stopping background dependency monitoring');\n\n        // Clear timers\n        if (this.securityCheckTimer) {\n            clearInterval(this.securityCheckTimer);\n            this.securityCheckTimer = null;\n        }\n\n        if (this.updateCheckTimer) {\n            clearInterval(this.updateCheckTimer);\n            this.updateCheckTimer = null;\n        }\n\n        // Dispose file watchers\n        if (this.workspaceWatcher) {\n            this.workspaceWatcher.dispose();\n            this.workspaceWatcher = null;\n        }\n\n        this.statusBar.showInfo('Dakota: Background monitoring stopped');\n    }\n\n    /**\n     * Update monitoring policy\n     */\n    updatePolicy(newPolicy: Partial<MonitoringPolicy>): void {\n        this.monitoringPolicy = { ...this.monitoringPolicy, ...newPolicy };\n        \n        // Restart monitoring with new policy if currently active\n        if (this.isMonitoring) {\n            this.stopMonitoring();\n            this.startMonitoring();\n        }\n    }\n\n    /**\n     * Get current monitoring status\n     */\n    getMonitoringStatus(): {\n        isActive: boolean;\n        policy: MonitoringPolicy;\n        stats: MonitoringStats;\n        activeAlerts: MonitoringAlert[];\n    } {\n        return {\n            isActive: this.isMonitoring,\n            policy: this.monitoringPolicy,\n            stats: this.monitoringStats,\n            activeAlerts: Array.from(this.activeAlerts.values())\n        };\n    }\n\n    /**\n     * Load configuration from VS Code settings\n     */\n    private loadConfiguration(): void {\n        const config = vscode.workspace.getConfiguration('bmad.dakota.monitoring');\n        \n        this.monitoringPolicy.securityCheckInterval = config.get('securityCheckInterval', 4 * 60 * 60 * 1000);\n        this.monitoringPolicy.updateCheckInterval = config.get('updateCheckInterval', 24 * 60 * 60 * 1000);\n        this.monitoringPolicy.autoUpdateEnabled = config.get('autoUpdateEnabled', true);\n        this.monitoringPolicy.autoUpdateRiskLevel = config.get('autoUpdateRiskLevel', 'low');\n        this.monitoringPolicy.notificationThreshold = config.get('notificationThreshold', 'medium');\n        this.monitoringPolicy.backgroundProcessingEnabled = config.get('backgroundProcessingEnabled', true);\n        this.monitoringPolicy.maxConcurrentChecks = config.get('maxConcurrentChecks', 3);\n    }\n\n    /**\n     * Set up file system watchers for dependency files\n     */\n    private setupFileWatchers(): void {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            return;\n        }\n\n        // Watch for changes to dependency files\n        const dependencyFiles = [\n            'package.json',\n            'package-lock.json',\n            'yarn.lock',\n            'requirements.txt',\n            'pyproject.toml',\n            'Cargo.toml',\n            'Cargo.lock',\n            'go.mod',\n            'go.sum',\n            'pom.xml',\n            'build.gradle',\n            'composer.json',\n            'composer.lock',\n            'Gemfile',\n            'Gemfile.lock'\n        ];\n\n        const pattern = `**/{${dependencyFiles.join(',')}}`;\n        this.workspaceWatcher = vscode.workspace.createFileSystemWatcher(pattern);\n\n        this.workspaceWatcher.onDidChange(async (uri) => {\n            console.log(`Dakota: Dependency file changed: ${uri.fsPath}`);\n            await this.handleDependencyFileChange(uri);\n        });\n\n        this.workspaceWatcher.onDidCreate(async (uri) => {\n            console.log(`Dakota: Dependency file created: ${uri.fsPath}`);\n            await this.handleDependencyFileChange(uri);\n        });\n    }\n\n    /**\n     * Schedule periodic security checks\n     */\n    private scheduleSecurityChecks(): void {\n        this.securityCheckTimer = setInterval(async () => {\n            if (this.monitoringPolicy.backgroundProcessingEnabled) {\n                await this.performSecurityCheck();\n            }\n        }, this.monitoringPolicy.securityCheckInterval);\n    }\n\n    /**\n     * Schedule periodic update checks\n     */\n    private scheduleUpdateChecks(): void {\n        this.updateCheckTimer = setInterval(async () => {\n            if (this.monitoringPolicy.backgroundProcessingEnabled) {\n                await this.performUpdateCheck();\n            }\n        }, this.monitoringPolicy.updateCheckInterval);\n    }\n\n    /**\n     * Perform initial scan when monitoring starts\n     */\n    private async performInitialScan(): Promise<void> {\n        try {\n            console.log('Dakota: Performing initial dependency scan');\n            \n            // Lightweight initial scan\n            await this.performSecurityCheck();\n            \n            // Schedule update check for later to avoid blocking startup\n            setTimeout(async () => {\n                await this.performUpdateCheck();\n            }, 30000); // 30 seconds delay\n\n        } catch (error) {\n            console.error('Dakota: Initial scan failed:', error);\n        }\n    }\n\n    /**\n     * Perform security vulnerability check\n     */\n    private async performSecurityCheck(): Promise<void> {\n        if (!this.isMonitoring) {\n            return;\n        }\n\n        try {\n            const startTime = Date.now();\n            console.log('Dakota: Performing background security check');\n\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                return;\n            }\n\n            // Discover dependencies\n            const dependencies = await this.discoverDependencies(workspaceFolder.uri.fsPath);\n            this.monitoringStats.totalPackagesMonitored = dependencies.length;\n\n            // Check critical dependencies first\n            const criticalDependencies = dependencies.slice(0, this.monitoringPolicy.maxConcurrentChecks);\n            \n            for (const dep of criticalDependencies) {\n                const research = await this.context7.securityResearch(dep.name, dep.version, dep.ecosystem);\n                \n                if (research) {\n                    this.monitoringStats.context7QueriesExecuted++;\n                    await this.processSecurityResearch(dep, research);\n                }\n            }\n\n            this.monitoringStats.lastSecurityCheck = new Date();\n            this.monitoringStats.averageResponseTime = Date.now() - startTime;\n\n        } catch (error) {\n            console.error('Dakota: Security check failed:', error);\n        }\n    }\n\n    /**\n     * Perform update availability check\n     */\n    private async performUpdateCheck(): Promise<void> {\n        if (!this.isMonitoring) {\n            return;\n        }\n\n        try {\n            console.log('Dakota: Performing background update check');\n\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                return;\n            }\n\n            // Check for updates (simplified implementation)\n            // In a real implementation, this would check package registries\n            \n            this.monitoringStats.lastUpdateCheck = new Date();\n\n        } catch (error) {\n            console.error('Dakota: Update check failed:', error);\n        }\n    }\n\n    /**\n     * Handle dependency file changes\n     */\n    private async handleDependencyFileChange(uri: vscode.Uri): Promise<void> {\n        if (!this.isMonitoring) {\n            return;\n        }\n\n        try {\n            // Debounce rapid changes\n            await new Promise(resolve => setTimeout(resolve, 1000));\n\n            console.log(`Dakota: Processing dependency file change: ${path.basename(uri.fsPath)}`);\n            \n            // Trigger security check for changed dependencies\n            await this.performSecurityCheck();\n\n        } catch (error) {\n            console.error('Dakota: Failed to handle dependency file change:', error);\n        }\n    }\n\n    /**\n     * Discover dependencies in workspace (simplified)\n     */\n    private async discoverDependencies(workspacePath: string): Promise<Array<{name: string; version: string; ecosystem: string}>> {\n        const dependencies: Array<{name: string; version: string; ecosystem: string}> = [];\n\n        // Check package.json\n        const packageJsonPath = path.join(workspacePath, 'package.json');\n        if (fs.existsSync(packageJsonPath)) {\n            try {\n                const content = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n                \n                // Add production dependencies\n                if (content.dependencies) {\n                    for (const [name, version] of Object.entries(content.dependencies)) {\n                        dependencies.push({ name, version: version as string, ecosystem: 'npm' });\n                    }\n                }\n            } catch (error) {\n                console.error('Dakota: Failed to parse package.json:', error);\n            }\n        }\n\n        return dependencies;\n    }\n\n    /**\n     * Process security research results\n     */\n    private async processSecurityResearch(\n        dependency: {name: string; version: string; ecosystem: string}, \n        research: Context7ResearchResult\n    ): Promise<void> {\n        if (!research.response.success) {\n            return;\n        }\n\n        // Extract security information from research\n        const insights = research.response.insights || [];\n        const hasSecurityIssues = insights.some(insight => \n            insight.toLowerCase().includes('vulnerability') ||\n            insight.toLowerCase().includes('security') ||\n            insight.toLowerCase().includes('cve')\n        );\n\n        if (hasSecurityIssues) {\n            const alert: MonitoringAlert = {\n                id: `security-${dependency.name}-${Date.now()}`,\n                type: 'security',\n                severity: this.determineSeverity(insights),\n                packageName: dependency.name,\n                currentVersion: dependency.version,\n                message: `Security vulnerability detected in ${dependency.name}`,\n                actionRequired: true,\n                timestamp: new Date(),\n                context7Research: research\n            };\n\n            this.addAlert(alert);\n        }\n    }\n\n    /**\n     * Determine severity from research insights\n     */\n    private determineSeverity(insights: string[]): 'critical' | 'high' | 'medium' | 'low' {\n        const text = insights.join(' ').toLowerCase();\n        \n        if (text.includes('critical') || text.includes('remote code execution')) {\n            return 'critical';\n        } else if (text.includes('high') || text.includes('privilege escalation')) {\n            return 'high';\n        } else if (text.includes('medium') || text.includes('cross-site scripting')) {\n            return 'medium';\n        } else {\n            return 'low';\n        }\n    }\n\n    /**\n     * Add alert to active alerts\n     */\n    private addAlert(alert: MonitoringAlert): void {\n        this.activeAlerts.set(alert.id, alert);\n        this.monitoringStats.alertsGenerated++;\n\n        // Show notification if severity meets threshold\n        if (this.shouldShowNotification(alert.severity)) {\n            this.showAlert(alert);\n        }\n    }\n\n    /**\n     * Check if alert should trigger notification\n     */\n    private shouldShowNotification(severity: 'critical' | 'high' | 'medium' | 'low'): boolean {\n        const thresholds = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n        const alertLevel = thresholds[severity];\n        const thresholdLevel = thresholds[this.monitoringPolicy.notificationThreshold];\n        \n        return alertLevel <= thresholdLevel;\n    }\n\n    /**\n     * Show alert notification\n     */\n    private async showAlert(alert: MonitoringAlert): Promise<void> {\n        const icon = alert.severity === 'critical' ? '🚨' : \n                    alert.severity === 'high' ? '⚠️' : \n                    alert.severity === 'medium' ? '📋' : 'ℹ️';\n\n        const message = `${icon} Dakota: ${alert.message}`;\n\n        if (alert.severity === 'critical') {\n            await vscode.window.showErrorMessage(message, 'View Details', 'Dismiss');\n        } else if (alert.severity === 'high') {\n            await vscode.window.showWarningMessage(message, 'View Details', 'Dismiss');\n        } else {\n            await vscode.window.showInformationMessage(message, 'View Details', 'Dismiss');\n        }\n    }\n\n    /**\n     * Dispose of monitoring resources\n     */\n    dispose(): void {\n        this.stopMonitoring();\n        this.activeAlerts.clear();\n    }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import * as vscode from 'vscode';\nimport { AugmentExtendedAPI, AugmentMenuItem, AugmentMenuProvider, isAugmentExtendedAPI } from './AugmentAPI';\nimport { BMadOrchestrator } from '../orchestrator/BMadOrchestrator';\nimport { WorkspaceAnalyzer } from '../analysis/WorkspaceAnalyzer';\n\n/**\n * Enhanced menu integration for Augment AI Code extension\n * Provides BMAD functionality as menu buttons and context menu items\n */\nexport class AugmentMenuIntegration {\n    private orchestrator: BMadOrchestrator;\n    private analyzer: WorkspaceAnalyzer;\n    private augmentAPI: AugmentExtendedAPI | null = null;\n\n    constructor(orchestrator: BMadOrchestrator, analyzer: WorkspaceAnalyzer) {\n        this.orchestrator = orchestrator;\n        this.analyzer = analyzer;\n    }\n\n    /**\n     * Initialize menu integration with Augment\n     */\n    async initialize(augmentAPI: any): Promise<boolean> {\n        if (!isAugmentExtendedAPI(augmentAPI)) {\n            console.log('Augment API does not support extended menu integration');\n            return false;\n        }\n\n        this.augmentAPI = augmentAPI;\n        await this.registerMenuProvider();\n        await this.addContextMenuItems();\n        await this.addMainMenuItems();\n        \n        console.log('BMAD menu integration with Augment initialized successfully');\n        return true;\n    }\n\n    /**\n     * Register BMAD as a menu provider with Augment\n     */\n    private async registerMenuProvider(): Promise<void> {\n        if (!this.augmentAPI) return;\n\n        const menuProvider: AugmentMenuProvider = {\n            id: 'bmad-menu-provider',\n            name: 'BMAD AI Agent Orchestrator',\n            menus: {\n                'editor/context': this.getEditorContextMenuItems(),\n                'explorer/context': this.getExplorerContextMenuItems(),\n                'view/title': this.getViewTitleMenuItems(),\n                'commandPalette': this.getCommandPaletteItems()\n            }\n        };\n\n        await this.augmentAPI.registerMenuProvider(menuProvider);\n    }\n\n    /**\n     * Add BMAD items to Augment's context menus\n     */\n    private async addContextMenuItems(): Promise<void> {\n        if (!this.augmentAPI) return;\n\n        // Add to file explorer context menu\n        await this.augmentAPI.addContextMenuItems('explorer/context', [\n            {\n                id: 'bmad.contextMenu.autoSetup',\n                label: 'BMAD: Auto Setup Project',\n                icon: '$(robot)',\n                command: 'bmad.autoSetup',\n                when: 'explorerResourceIsFolder',\n                group: 'bmad@1'\n            },\n            {\n                id: 'bmad.contextMenu.analyzeProject',\n                label: 'BMAD: Analyze Project',\n                icon: '$(search)',\n                command: 'bmad.analyzeProject',\n                when: 'explorerResourceIsFolder',\n                group: 'bmad@2'\n            }\n        ]);\n\n        // Add to editor context menu\n        await this.augmentAPI.addContextMenuItems('editor/context', [\n            {\n                id: 'bmad.contextMenu.debugFile',\n                label: 'BMAD: Debug This File',\n                icon: '$(debug)',\n                command: 'bmad.debugCurrentFile',\n                when: 'editorHasSelection',\n                group: 'bmad@1'\n            },\n            {\n                id: 'bmad.contextMenu.documentFile',\n                label: 'BMAD: Document This File',\n                icon: '$(book)',\n                command: 'bmad.documentCurrentFile',\n                when: 'editorTextFocus',\n                group: 'bmad@2'\n            }\n        ]);\n    }\n\n    /**\n     * Add BMAD items to Augment's main menu\n     */\n    private async addMainMenuItems(): Promise<void> {\n        if (!this.augmentAPI) return;\n\n        const mainMenuItems: AugmentMenuItem[] = [\n            {\n                id: 'bmad.mainMenu.workflows',\n                label: 'BMAD Workflows',\n                icon: '$(robot)',\n                submenu: [\n                    {\n                        id: 'bmad.mainMenu.documentationMode',\n                        label: 'Documentation Mode',\n                        icon: '$(book)',\n                        command: 'bmad.activateDocumentationMode'\n                    },\n                    {\n                        id: 'bmad.mainMenu.fullDevelopmentMode',\n                        label: 'Full Development Mode',\n                        icon: '$(rocket)',\n                        command: 'bmad.activateFullDevelopmentMode'\n                    },\n                    {\n                        id: 'bmad.mainMenu.debugMode',\n                        label: 'Debug & Troubleshoot',\n                        icon: '$(debug)',\n                        command: 'bmad.debugMode'\n                    },\n                    {\n                        id: 'bmad.mainMenu.separator1',\n                        label: '---',\n                        command: ''\n                    },\n                    {\n                        id: 'bmad.mainMenu.continueProject',\n                        label: 'Continue Project',\n                        icon: '$(debug-continue)',\n                        command: 'bmad.continueProject'\n                    },\n                    {\n                        id: 'bmad.mainMenu.taskOverview',\n                        label: 'Task Overview',\n                        icon: '$(list-tree)',\n                        command: 'bmad.taskOverview'\n                    },\n                    {\n                        id: 'bmad.mainMenu.separator2',\n                        label: '---',\n                        command: ''\n                    },\n                    {\n                        id: 'bmad.mainMenu.continuousExecution',\n                        label: 'Continuous Execution',\n                        icon: '$(sync)',\n                        command: 'bmad.continuousExecution'\n                    },\n                    {\n                        id: 'bmad.mainMenu.featureGapAnalysis',\n                        label: 'Feature Gap Analysis',\n                        icon: '$(search)',\n                        command: 'bmad.featureGapAnalysis'\n                    },\n                    {\n                        id: 'bmad.mainMenu.githubIntegration',\n                        label: 'GitHub Integration',\n                        icon: '$(github)',\n                        command: 'bmad.githubIntegration'\n                    }\n                ]\n            },\n            {\n                id: 'bmad.mainMenu.quickActions',\n                label: 'BMAD Quick Actions',\n                icon: '$(zap)',\n                submenu: [\n                    {\n                        id: 'bmad.mainMenu.quickModeSelect',\n                        label: 'Quick Mode Selection',\n                        icon: '$(list-selection)',\n                        command: 'bmad.quickModeSelect'\n                    },\n                    {\n                        id: 'bmad.mainMenu.autoSetup',\n                        label: 'Auto Setup Workspace',\n                        icon: '$(gear)',\n                        command: 'bmad.autoSetup'\n                    },\n                    {\n                        id: 'bmad.mainMenu.showStatus',\n                        label: 'Show Status',\n                        icon: '$(info)',\n                        command: 'bmad.showStatus'\n                    }\n                ]\n            }\n        ];\n\n        await this.augmentAPI.addMainMenuItems(mainMenuItems);\n    }\n\n    /**\n     * Get editor context menu items\n     */\n    private getEditorContextMenuItems(): AugmentMenuItem[] {\n        return [\n            {\n                id: 'bmad.editor.debugSelection',\n                label: 'Debug Selection with BMAD',\n                icon: '$(debug)',\n                command: 'bmad.debugSelection',\n                when: 'editorHasSelection'\n            },\n            {\n                id: 'bmad.editor.explainCode',\n                label: 'Explain Code with BMAD',\n                icon: '$(question)',\n                command: 'bmad.explainCode',\n                when: 'editorTextFocus'\n            },\n            {\n                id: 'bmad.editor.generateTests',\n                label: 'Generate Tests with BMAD',\n                icon: '$(beaker)',\n                command: 'bmad.generateTests',\n                when: 'editorTextFocus'\n            }\n        ];\n    }\n\n    /**\n     * Get explorer context menu items\n     */\n    private getExplorerContextMenuItems(): AugmentMenuItem[] {\n        return [\n            {\n                id: 'bmad.explorer.setupProject',\n                label: 'Setup with BMAD',\n                icon: '$(robot)',\n                command: 'bmad.autoSetup',\n                when: 'explorerResourceIsFolder'\n            },\n            {\n                id: 'bmad.explorer.analyzeFolder',\n                label: 'Analyze with BMAD',\n                icon: '$(search)',\n                command: 'bmad.analyzeFolder',\n                when: 'explorerResourceIsFolder'\n            },\n            {\n                id: 'bmad.explorer.generateDocs',\n                label: 'Generate Documentation',\n                icon: '$(book)',\n                command: 'bmad.generateDocsForFolder',\n                when: 'explorerResourceIsFolder'\n            }\n        ];\n    }\n\n    /**\n     * Get view title menu items\n     */\n    private getViewTitleMenuItems(): AugmentMenuItem[] {\n        return [\n            {\n                id: 'bmad.viewTitle.refresh',\n                label: 'Refresh BMAD Analysis',\n                icon: '$(refresh)',\n                command: 'bmad.refreshAnalysis'\n            },\n            {\n                id: 'bmad.viewTitle.settings',\n                label: 'BMAD Settings',\n                icon: '$(settings-gear)',\n                command: 'bmad.openSettings'\n            }\n        ];\n    }\n\n    /**\n     * Get command palette items\n     */\n    private getCommandPaletteItems(): AugmentMenuItem[] {\n        return [\n            {\n                id: 'bmad.palette.quickStart',\n                label: 'BMAD: Quick Start',\n                icon: '$(rocket)',\n                command: 'bmad.quickModeSelect'\n            },\n            {\n                id: 'bmad.palette.showHelp',\n                label: 'BMAD: Show Help',\n                icon: '$(question)',\n                command: 'bmad.showHelp'\n            }\n        ];\n    }\n\n    /**\n     * Create a custom BMAD panel within Augment\n     */\n    async showBmadPanel(): Promise<void> {\n        if (!this.augmentAPI) return;\n\n        const panelContent = {\n            title: 'BMAD AI Agent Orchestrator',\n            type: 'webview',\n            content: this.generatePanelHTML(),\n            actions: [\n                {\n                    id: 'documentation-mode',\n                    label: 'Documentation Mode',\n                    icon: 'book',\n                    command: 'bmad.activateDocumentationMode'\n                },\n                {\n                    id: 'full-development-mode',\n                    label: 'Full Development',\n                    icon: 'rocket',\n                    command: 'bmad.activateFullDevelopmentMode'\n                },\n                {\n                    id: 'debug-mode',\n                    label: 'Debug & Troubleshoot',\n                    icon: 'debug',\n                    command: 'bmad.debugMode'\n                }\n            ]\n        };\n\n        await this.augmentAPI.showPanel('bmad-orchestrator', panelContent);\n    }\n\n    /**\n     * Generate HTML content for BMAD panel\n     */\n    private generatePanelHTML(): string {\n        return `\n            <div class=\"bmad-panel\">\n                <h2>🤖 BMAD AI Agent Orchestrator</h2>\n                <p>Choose a workflow to get started:</p>\n                \n                <div class=\"workflow-grid\">\n                    <button class=\"workflow-btn\" onclick=\"executeCommand('bmad.activateDocumentationMode')\">\n                        <span class=\"icon\">📚</span>\n                        <span class=\"title\">Documentation Mode</span>\n                        <span class=\"desc\">Generate PRD, Architecture, and Checklist</span>\n                    </button>\n                    \n                    <button class=\"workflow-btn\" onclick=\"executeCommand('bmad.activateFullDevelopmentMode')\">\n                        <span class=\"icon\">🚀</span>\n                        <span class=\"title\">Full Development</span>\n                        <span class=\"desc\">Complete application development</span>\n                    </button>\n                    \n                    <button class=\"workflow-btn\" onclick=\"executeCommand('bmad.debugMode')\">\n                        <span class=\"icon\">🐛</span>\n                        <span class=\"title\">Debug & Troubleshoot</span>\n                        <span class=\"desc\">Systematic issue resolution</span>\n                    </button>\n                    \n                    <button class=\"workflow-btn\" onclick=\"executeCommand('bmad.continueProject')\">\n                        <span class=\"icon\">▶️</span>\n                        <span class=\"title\">Continue Project</span>\n                        <span class=\"desc\">Resume existing work</span>\n                    </button>\n                </div>\n                \n                <div class=\"quick-actions\">\n                    <button onclick=\"executeCommand('bmad.quickModeSelect')\">Quick Mode Selection</button>\n                    <button onclick=\"executeCommand('bmad.autoSetup')\">Auto Setup</button>\n                    <button onclick=\"executeCommand('bmad.showStatus')\">Show Status</button>\n                </div>\n            </div>\n            \n            <style>\n                .bmad-panel { padding: 20px; font-family: var(--vscode-font-family); }\n                .workflow-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }\n                .workflow-btn {\n                    padding: 15px; border: 2px solid #8B5CF6;\n                    background: linear-gradient(135deg, #8B5CF6 0%, #A855F7 100%);\n                    color: white;\n                    border-radius: 8px; cursor: pointer; text-align: left; display: flex; flex-direction: column;\n                    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);\n                    transition: all 0.3s ease;\n                }\n                .workflow-btn:hover {\n                    background: linear-gradient(135deg, #7C3AED 0%, #9333EA 100%);\n                    transform: translateY(-2px);\n                    box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);\n                }\n                .workflow-btn .icon { font-size: 24px; margin-bottom: 8px; color: #E5E7EB; }\n                .workflow-btn .title { font-weight: bold; margin-bottom: 4px; color: white; }\n                .workflow-btn .desc { font-size: 12px; opacity: 0.9; color: #E5E7EB; }\n                .quick-actions { display: flex; gap: 10px; margin-top: 20px; }\n                .quick-actions button {\n                    padding: 8px 16px; border: 2px solid #8B5CF6;\n                    background: rgba(139, 92, 246, 0.1); color: #8B5CF6;\n                    border-radius: 6px; cursor: pointer;\n                    transition: all 0.2s ease;\n                }\n                .quick-actions button:hover {\n                    background: #8B5CF6; color: white;\n                    transform: translateY(-1px);\n                }\n            </style>\n            \n            <script>\n                function executeCommand(command) {\n                    vscode.postMessage({ command: command });\n                }\n            </script>\n        `;\n    }\n\n    /**\n     * Dispose of menu integration resources\n     */\n    dispose(): void {\n        this.augmentAPI = null;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(144);\n"],"names":["config","cache","isAvailable","lastHealthCheck","healthCheckInterval","constructor","this","baseUrl","autoActivate","maxRetries","timeoutMs","cacheEnabled","cacheTtlMs","Map","initializeIntegration","healthCheck","loadConfiguration","console","log","error","warn","vscode","workspace","getConfiguration","apiKey","get","process","env","CONTEXT7_API_KEY","now","Date","getTime","response","makeRequest","success","autoResearch","query","startTime","cacheKey","generateCacheKey","cached","getCachedResult","timestamp","duration","quality","assessResponseQuality","performResearch","setCachedResult","Error","message","securityResearch","packageName","version","ecosystem","toISOString","split","sources","focus","dateContext","updateResearch","currentVersion","targetVersion","alternativeResearch","reason","getFullYear","payload","context","date","package","endpoint","method","data","url","timeout","controller","AbortController","timeoutId","setTimeout","abort","headers","fetch","body","JSON","stringify","undefined","signal","clearTimeout","ok","status","statusText","result","json","insights","recommendations","confidence","name","key","join","Buffer","from","toString","delete","set","size","cleanupCache","expiredKeys","value","entries","push","forEach","Math","max","length","min","isIntegrationAvailable","getIntegrationStatus","available","cacheSize","reset","clear","dispose","analyzer","statusBar","initializer","activeAgents","currentMode","workflowProgress","initializeWorkspace","workspaceFolder","commands","executeCommand","BMadError","executeMode","mode","projectAnalysis","createExecutionContext","initializeWorkflowProgress","activateAgents","recommendedAgents","executeWorkflow","showError","agentIds","updateMode","agents","getActiveAgents","getCurrentMode","updateProgress","progress","workspaceFolders","userPreferences","autoActivateRecommendedAgents","enableRealTimeMonitoring","progressNotifications","existingArtifacts","getExistingArtifacts","selectedAgents","phase","completedTasks","remainingTasks","getModeTaskList","executeDocumentationMode","executeFullDevelopmentMode","executeContinueProjectMode","executeTaskOverviewMode","executeDebugMode","executeContinuousExecutionMode","executeFeatureGapAnalysisMode","executeGithubIntegrationMode","delay","action","window","showInformationMessage","openGeneratedDocuments","existingState","analyzeExistingProjectState","showContinuationOptions","generateTaskDashboard","diagnostics","languages","getDiagnostics","issues","processDiagnostics","updateIssues","showWarningMessage","phases","i","artifacts","commonFiles","file","fileUri","Uri","joinPath","uri","fs","stat","documentation","fullDevelopment","continueProject","taskOverview","debugMode","continuousExecution","featureGapAnalysis","githubIntegration","ms","Promise","resolve","documents","doc","docUri","showTextDocument","hasExistingTasks","completionPercentage","lastModified","selected","showQuickPick","title","placeHolder","diags","diag","severity","DiagnosticSeverity","category","fsPath","line","range","start","canAutoFix","code","super","BMAD_FOLDER","checkIfInitializationNeeded","bmadPath","path","bmadUri","validateExistingSetup","analysis","analyzeProject","createBmadStructure","configureWorkspaceSettings","showInitializationSuccess","folders","createDirectory","folder","folderPath","copyBaseTemplates","generateConfiguration","createIdeOrchestratorConfig","createPersonaFiles","createTaskFiles","createTemplateFiles","createChecklistFiles","createDataFiles","personasPath","personas","content","getBmadPersonaContent","getPmPersonaContent","getArchitectPersonaContent","getDesignArchitectPersonaContent","getSecurityEngineerPersonaContent","getPlatformEngineerPersonaContent","getTaskBreakdownSpecialistPersonaContent","getTechnicalWriterPersonaContent","persona","filePath","TextEncoder","encode","writeFile","tasksPath","tasks","getDocumentationModeTaskContent","getContinueProjectTaskContent","getTaskOverviewTaskContent","getDebugTaskContent","task","templatesPath","templates","getPrdTemplateContent","getArchitectureTemplateContent","getChecklistTemplateContent","template","checklistsPath","checklists","getPmChecklistContent","getArchitectChecklistContent","getSecurityChecklistContent","checklist","dataPath","dataFiles","getBmadKnowledgeBaseContent","dataFile","projectType","type","framework","language","complexity","recommendedMode","autoActivateAgents","features","hasDatabase","hasAuthentication","hasFrontend","hasBackend","hasDocker","hasKubernetes","hasTests","hasCICD","dependencies","createdAt","configPath","configContent","getIdeOrchestratorConfigContent","update","ConfigurationTarget","Workspace","requiredFolders","missingFolders","charAt","toUpperCase","slice","async","configManager","ConfigurationManager","WorkspaceAnalyzer","StatusBarManager","BMadInitializer","orchestrator","BMadOrchestrator","commandManager","CommandManager","monitor","WorkspaceMonitor","augmentIntegration","AugmentIntegration","augmentMenuIntegration","AugmentMenuIntegration","registerCommands","initialize","autoInitialize","autoInitializeWorkspaces","startMonitoring","globalState","modal","openExternal","parse","showWelcomeMessage","errorMessage","String","showErrorMessage","fileWatcher","diagnosticWatcher","configWatcher","changeTimeout","isMonitoring","lastAnalysis","setupFileWatcher","setupDiagnosticWatcher","setupConfigurationWatcher","stopMonitoring","isActive","createFileSystemWatcher","onDidChange","onConfigFileChange","bind","onDidCreate","onConfigFileCreate","onDidDelete","onConfigFileDelete","onDidChangeDiagnostics","onDiagnosticsChange","onDidChangeConfiguration","event","affectsConfiguration","onBmadConfigurationChange","emitWorkspaceEvent","analyzeProjectChanges","fileName","pop","includes","changedUris","uris","map","allDiagnostics","criticalIssues","filter","issue","threshold","suggestDebugMode","section","changedUri","analyzeWorkspace","suggestModeChange","newAgents","agent","suggestNewAgents","agentNames","id","getAgentDisplayName","currentAgents","validAgents","Warning","Information","Hint","categorizeIssue","diagnostic","toLowerCase","details","triggeredActions","agentId","john","fred","jane","sage","alex","tyler","taylor","sarah","bob","context7","dependencyMonitor","context7Config","Context7Integration","DependencyMonitor","performDependencyAudit","projectPath","workspacePath","showLoading","discoverDependencies","context7Insights","vulnerabilities","dep","vulns","extractVulnerabilitiesFromResearch","updateRecommendation","generateUpdateRecommendation","healthScore","calculateHealthScore","sort","a","b","prioritizeRecommendations","totalDependencies","outdatedPackages","latestVersion","showSuccess","generateAuditReport","performDependencyModernization","auditResult","autoUpdates","rec","manualReviews","executeAutomaticUpdate","presentManualReviews","startDependencyMonitoring","showInfo","stopDependencyMonitoring","packageManagers","pm","existsSync","deps","parseDependencyFile","readFileSync","packageJson","Object","devDependencies","peerDependencies","dependency","getLatestVersion","reasoning","riskLevel","versionDiff","analyzeVersionDifference","hasBreakingChanges","v","generateRecommendationReasoning","migrationComplexity","context7Research","current","target","research","score","outdated","d","riskOrder","recommendation","reportPath","getStatus","monitoringStatus","getMonitoringStatus","context7Available","monitoringStats","stats","existingBmadSetup","checkExistingBmadSetup","generateRecommendations","exists","bmadConfigPath","needsInitialization","readPackageJson","requirementsTxt","readRequirementsTxt","cargoToml","readCargoToml","pomXml","readPomXml","determineProjectType","detectFramework","detectLanguage","detectDatabase","detectAuthentication","detectFrontend","detectBackend","detectDocker","detectKubernetes","detectTests","detectCICD","calculateComplexity","extractDependencies","extractDevDependencies","recommendMode","recommendAgents","calculateConfidence","FileType","Directory","generateAgentRecommendations","actions","generateActionRecommendations","description","specializations","required","some","packagePath","packageUri","packageData","readFile","TextDecoder","decode","reqPath","reqUri","reqData","trim","cargoPath","cargoUri","cargoData","pomPath","pomUri","pomData","requirements","lib","req","dockerPath","k8sPath","keys","cicdPaths","ciPath","fullPath","totalDeps","react","express","fastify","vue","electron","reqString","svelte","typescript","module","exports","require","statusBarItem","progressItem","issueItem","currentInfo","createStatusBarItem","StatusBarAlignment","Left","lastUpdate","text","tooltip","command","show","modeDisplayName","getModeDisplayName","buildModeTooltip","backgroundColor","buildProgressTooltip","hide","highIssues","buildIssueTooltip","ThemeColor","then","getCurrentInfo","dakota","modeDescription","getModeDescription","agentList","timeRemaining","estimatedTimeRemaining","round","currentAgent","issueSummary","reduce","acc","count","dakotaAgent","DakotaAgent","registerCommand","activateMode","showQuickModeSelector","scanWorkspace","autoSetup","detectTechStack","showAgentSelector","performAgentHandoff","performHealthCheck","showProgressDetails","showModeDetails","showErrorDetails","debugCurrentFile","documentCurrentFile","debugSelection","explainCode","generateTests","analyzeFolder","generateDocsForFolder","refreshAnalysis","openSettings","showHelp","checkSecurityVulnerabilities","updateOutdatedDependencies","generateDependencyReport","analyzeDependencyLicenses","onConfigurationChanged","subscriptions","label","detail","matchOnDescription","matchOnDetail","buildAnalysisMessage","showAnalysisDetails","project","stackInfo","agentItems","getAvailableAgents","icon","picked","canPickMany","item","statusInfo","toLocaleString","editor","activeTextEditor","document","selection","isEmpty","selectedText","getText","substring","helpContent","criticalUpdates","r","planMessage","critical","high","safeUpdates","augmentExtension","isIntegrated","extensions","getExtension","setupFallbackIntegration","integrateWithAugment","augmentAPI","activate","registerWorkflowProvider","registerBmadWorkflowProvider","workflowProvider","color","workflows","handler","handleDocumentationMode","handleFullDevelopmentMode","handleDebugMode","handleContinueProject","handleTaskOverview","handleContinuousExecution","handleFeatureGapAnalysis","handleGithubIntegration","handleDependencyAudit","handleDependencyModernization","handleSecurityScan","registerVSCodeMenus","analysisResult","onComplete","outputs","onError","isAugmentIntegrated","getAugmentInfo","packageJSON","CONFIG_SECTION","configurationChangeListener","defaultMode","debugModeThreshold","intelligentRecommendations","statusBarIntegration","updateConfiguration","updates","getConfigValue","defaultValue","newConfig","validateConfiguration","errors","isValid","resetToDefaults","exportConfiguration","importConfiguration","configJson","validation","getWorkspaceConfigPath","saveWorkspaceConfiguration","loadWorkspaceConfiguration","configUri","configData","isAugmentAPI","obj","unregisterWorkflowProvider","getWorkflowProviders","addMainMenuItems","showPanel","DEFAULT_AUGMENT_CONFIG","enableWorkflowProvider","enableMenuIntegration","enableProgressReporting","defaultCategory","fallbackToVSCode","showNotifications","monitoringPolicy","activeAlerts","securityCheckTimer","updateCheckTimer","workspaceWatcher","policy","securityCheckInterval","updateCheckInterval","autoUpdateEnabled","autoUpdateRiskLevel","notificationThreshold","backgroundProcessingEnabled","maxConcurrentChecks","totalPackagesMonitored","lastSecurityCheck","lastUpdateCheck","alertsGenerated","autoUpdatesPerformed","context7QueriesExecuted","averageResponseTime","setupFileWatchers","scheduleSecurityChecks","scheduleUpdateChecks","performInitialScan","clearInterval","updatePolicy","newPolicy","Array","values","pattern","handleDependencyFileChange","setInterval","performSecurityCheck","performUpdateCheck","criticalDependencies","processSecurityResearch","basename","packageJsonPath","insight","alert","determineSeverity","actionRequired","addAlert","shouldShowNotification","showAlert","thresholds","isAugmentExtendedAPI","registerMenuProvider","addContextMenuItems","menuProvider","menus","getEditorContextMenuItems","getExplorerContextMenuItems","getViewTitleMenuItems","getCommandPaletteItems","when","group","submenu","showBmadPanel","panelContent","generatePanelHTML","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}