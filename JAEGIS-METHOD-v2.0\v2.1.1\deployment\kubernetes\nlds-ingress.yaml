# N.L.D.S. Ingress Configuration
# JAEGIS Enhanced Agent System v2.2 - Tier 0 Component

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nlds-ingress
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.jaegis.ai,https://dashboard.jaegis.ai"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "60"
    
    # Body size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"

spec:
  tls:
  - hosts:
    - api.jaegis.ai
    - nlds.jaegis.ai
    secretName: nlds-tls-secret
  rules:
  - host: api.jaegis.ai
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80
      - path: /ready
        pathType: Exact
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80
      - path: /openapi.json
        pathType: Exact
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80
  - host: nlds.jaegis.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nlds-api-service
            port:
              number: 80

---
# Certificate for TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nlds-tls-certificate
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: certificate
spec:
  secretName: nlds-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.jaegis.ai
  - nlds.jaegis.ai

---
# ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: cluster-issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@jaegis.ai
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Ingress for Monitoring (Grafana, Prometheus)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nlds-monitoring-ingress
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: monitoring-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "N.L.D.S. Monitoring - Authentication Required"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.jaegis.ai
    secretName: monitoring-tls-secret
  rules:
  - host: monitoring.jaegis.ai
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090

---
# Basic Auth Secret for Monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: monitoring-auth
type: Opaque
data:
  # Generated with: htpasswd -nb admin <password> | base64
  auth: <base64-encoded-htpasswd>

---
# Certificate for Monitoring TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: monitoring-tls-certificate
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: monitoring-certificate
spec:
  secretName: monitoring-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - monitoring.jaegis.ai

---
# Middleware for additional security
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: nlds-security-headers
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: middleware
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Frame-Options: "SAMEORIGIN"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Referrer-Policy: "strict-origin-when-cross-origin"
      Permissions-Policy: "geolocation=(), microphone=(), camera=()"
    contentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';"
    stsSeconds: 31536000
    stsIncludeSubdomains: true
    stsPreload: true

---
# Rate Limiting Middleware
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: nlds-rate-limit
  namespace: nlds
  labels:
    app.kubernetes.io/name: nlds
    app.kubernetes.io/component: rate-limit
spec:
  rateLimit:
    average: 1000
    period: 1m
    burst: 100
    sourceCriterion:
      ipStrategy:
        depth: 1
