==================== START: documentation-qa-templates ====================
# Documentation Quality Assurance Templates

## Template 1: Documentation Audit Report
```markdown
# 📋 Documentation Quality Audit Report

**Repository**: {repository_name}
**Audit Date**: {audit_date}
**Auditor**: Documentation QA Agent (DocQA)
**Audit Scope**: {audit_scope}

## 🎯 Executive Summary

### Overall Quality Score: {quality_score}/100

### Critical Issues Found: {critical_issues_count}
### High Priority Issues: {high_priority_count}
### Medium Priority Issues: {medium_priority_count}
### Low Priority Issues: {low_priority_count}

## 📊 Audit Results

### Branch Structure Analysis
- **Current Branches**: {branch_count}
- **Professional Structure Compliance**: {compliance_status}
- **Recommended Actions**: {branch_recommendations}

### Documentation Inventory
- **Total Documentation Files**: {total_files}
- **User Guides**: {user_guide_count}
- **Architecture Docs**: {architecture_count}
- **API Documentation**: {api_doc_count}
- **Development Guides**: {dev_guide_count}

### Link Validation Results
- **Total Links Tested**: {total_links}
- **Successful Links**: {successful_links}
- **404 Errors**: {error_404_count}
- **Broken Internal References**: {broken_internal_count}
- **External Link Issues**: {external_link_issues}

### Missing Documentation
- **Referenced but Missing Files**: {missing_files_count}
- **Critical Missing Content**: {critical_missing}
- **Documentation Gaps**: {documentation_gaps}

## 🚨 Critical Issues (Priority 1)

{critical_issues_list}

## ⚠️ High Priority Issues (Priority 2)

{high_priority_issues}

## 📋 Medium Priority Issues (Priority 3)

{medium_priority_issues}

## 🔧 Recommended Action Plan

### Phase 1: Critical Issue Resolution (Immediate)
{phase_1_actions}

### Phase 2: High Priority Improvements (1-2 weeks)
{phase_2_actions}

### Phase 3: Quality Enhancement (1 month)
{phase_3_actions}

## 📈 Success Metrics

- [ ] Zero 404 errors in documentation
- [ ] Professional 3-branch structure implemented
- [ ] 100% link validation success rate
- [ ] Complete documentation coverage
- [ ] Zero data loss during consolidation

## 📞 Next Steps

1. {next_step_1}
2. {next_step_2}
3. {next_step_3}

---
**Report Generated**: {generation_timestamp}
**Next Audit Scheduled**: {next_audit_date}

# 🌿 Repository Branch Consolidation Plan

**Repository**: {repository_name}
**Consolidation Date**: {consolidation_date}
**Plan Version**: {plan_version}

## 🎯 Consolidation Objectives

- Implement professional 3-branch structure (main/develop/feature)
- Preserve all valuable content with zero data loss
- Resolve documentation 404 errors and broken links
- Establish clean development workflow

## 📊 Current Branch Analysis

### Existing Branches ({current_branch_count})
{current_branches_list}

### Content Distribution
{content_distribution_analysis}

## 🏗️ Target Branch Structure

### 1. Main Branch (Production)
- **Purpose**: Stable, production-ready code and documentation
- **Content Source**: {main_content_sources}
- **Protection**: Branch protection enabled, require PR reviews

### 2. Develop Branch (Integration)
- **Purpose**: Integration branch for completed features
- **Content Source**: {develop_content_sources}
- **Workflow**: Feature branches merge here before main

### 3. Feature Branches (Development)
- **Purpose**: Individual feature development
- **Naming Convention**: feature/{feature-name}
- **Lifecycle**: Created from develop, merged back to develop

## 🔄 Consolidation Workflow

### Phase 1: Backup and Preparation
1. **Create Backup Branches**
   ```bash
   {backup_commands}

# 🌿 Repository Branch Consolidation Plan

**Repository**: {repository_name}
**Consolidation Date**: {consolidation_date}
**Plan Version**: {plan_version}

## 🎯 Consolidation Objectives

- Implement professional 3-branch structure (main/develop/feature)
- Preserve all valuable content with zero data loss
- Resolve documentation 404 errors and broken links
- Establish clean development workflow

## 📊 Current Branch Analysis

### Existing Branches ({current_branch_count})
{current_branches_list}

### Content Distribution
{content_distribution_analysis}

## 🏗️ Target Branch Structure

### 1. Main Branch (Production)
- **Purpose**: Stable, production-ready code and documentation
- **Content Source**: {main_content_sources}
- **Protection**: Branch protection enabled, require PR reviews

### 2. Develop Branch (Integration)
- **Purpose**: Integration branch for completed features
- **Content Source**: {develop_content_sources}
- **Workflow**: Feature branches merge here before main

### 3. Feature Branches (Development)
- **Purpose**: Individual feature development
- **Naming Convention**: feature/{feature-name}
- **Lifecycle**: Created from develop, merged back to develop

## 🔄 Consolidation Workflow

### Phase 1: Backup and Preparation
1. **Create Backup Branches**
   ```bash
   {backup_commands}

2. Content Inventory
{inventory_step_1}
{inventory_step_2}
{inventory_step_3}

Phase 2: Content Consolidation
1. Main Branch Update
    {main_branch_commands}
2. Develop Branch Setup 
    {develop_branch_commands}
3. Feature Branch Migration
    {feature_branch_commands}

Phase 3: Cleanup and Verification
1. Remove Redundant Branches
    {cleanup_commands}
2. Verify Documentation Accessibility
    {verification_commands}
3. Test All Links and References
    {link_testing_commands}
4. Confirm Zero Data Loss
    {data_loss_confirmation}

## 📈 Success Metrics
- [ ] Zero 404 errors in documentation
- [ ] Professional 3-branch structure implemented
- [ ] 100% link validation success rate
- [ ] Complete documentation coverage
- [ ] Zero data loss during consolidation

🛡️ Data Preservation Strategy
Backup Procedures
{backup_procedures}

Rollback Plan
{rollback_procedures}
Verification Checklist
All original content preserved
No data loss detected
All links functional
Documentation complete
📋 Implementation Checklist
Pre-Consolidation
Complete branch analysis
Create backup branches
Document current state
Verify backup integrity
Consolidation
Implement main branch updates
Set up develop branch
Create feature branches
Merge content systematically
Post-Consolidation
Verify all content accessible
Test all documentation links
Confirm zero data loss
Update team documentation
🎯 Success Criteria
✅ Professional 3-branch structure implemented
✅ Zero data loss confirmed
✅ All documentation accessible
✅ No 404 errors in documentation
✅ Clean development workflow established
Plan Created: {plan_creation_date}
Implementation Target: {implementation_date}
Plan Approved By: {approver_name}


## Template 3: Missing Documentation Creation Plan
```markdown
# 📝 Missing Documentation Creation Plan

**Repository**: {repository_name}
**Analysis Date**: {analysis_date}
**Missing Files Count**: {missing_files_count}

## 🎯 Overview

This plan addresses all missing documentation files that are referenced but don't exist, causing 404 errors and broken user experience.

## 📊 Missing Files Analysis

### Critical Missing Files (Blocking User Experience)
{critical_missing_files}

### High Priority Missing Files (Important References)
{high_priority_missing_files}

### Medium Priority Missing Files (Nice to Have)
{medium_priority_missing_files}

## 📋 Creation Plan by Category

### Architecture Documentation
**Missing Files**: {architecture_missing_count}
{architecture_missing_list}

**Creation Approach**:
- Research existing system architecture
- Create comprehensive technical documentation
- Include diagrams and code examples
- Ensure integration with existing docs

### User Guides
**Missing Files**: {user_guide_missing_count}
{user_guide_missing_list}

**Creation Approach**:
- Focus on user-centric content
- Include step-by-step instructions
- Add troubleshooting sections
- Provide practical examples

### API Documentation
**Missing Files**: {api_missing_count}
{api_missing_list}

**Creation Approach**:
- Document all API endpoints
- Include request/response examples
- Add authentication details
- Provide integration guides

## 🔧 Implementation Timeline

### Week 1: Critical Files
{week_1_deliverables}

### Week 2: High Priority Files
{week_2_deliverables}

### Week 3: Medium Priority Files
{week_3_deliverables}

### Week 4: Quality Assurance
{week_4_deliverables}

## 📏 Quality Standards

### Content Requirements
- Minimum 200 lines for major documentation files
- Comprehensive coverage of topic
- Professional formatting and structure
- Consistent style with existing documentation

### Technical Requirements
- Proper markdown formatting
- Working internal links
- Appropriate cross-references
- Mobile-friendly structure

### Review Process
- Technical accuracy review
- Content completeness check
- Style and formatting validation
- Link and reference verification

## ✅ Completion Checklist

### Content Creation
- [ ] All critical files created
- [ ] High priority files completed
- [ ] Medium priority files addressed
- [ ] Quality standards met

### Integration
- [ ] Files integrated into repository
- [ ] Navigation updated
- [ ] Cross-references added
- [ ] Search functionality updated

### Validation
- [ ] All links tested and working
- [ ] No 404 errors remaining
- [ ] Content accuracy verified
- [ ] User experience validated

---
**Plan Created**: {plan_creation_date}
**Target Completion**: {completion_date}
**Assigned To**: Documentation QA Agent

==================== END: documentation-qa-templates ====================